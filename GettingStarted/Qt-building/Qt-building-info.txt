Prerequisites
=============
Download and install TDM-GCC 4.8.1 (32 bit) with the msys installer listed in the links below.

http://tdm-gcc.tdragon.net/download
http://sourceforge.net/apps/trac/mingw-w64/wiki/MSYS
http://sourceforge.net/projects/mingw-w64/files/External%20binary%20packages%20(Win64%20hosted)/MSYS%20(32-bit)/

I downloaded
tdm-gcc-4.8.1-3.exe (actually I used  tdm-gcc-webdl.exe and selected the 32 bit mingw and all packages)
and
MSYS-20111123.zip

I installed/unpacked to
D:\TDM-GCC\TDM-GCC-32
and
D:\TDM-GCC\msysMingw32
 
in an msys shell (double click D:\TDM-GCC\msysMingw32\msys.bat), run 
sh /postinstall/pi.sh
to set up msys with mingw (msys has no compiler of its own)


UPDATE: 26.Apr 2015
-----------
example of running postinstall:
NOTE: on the computer that i gathered this output, i am using C: instead of D:
C:\TDM-GCC\TDM-GCC-32
so, mingwvars.bat is located in C:\TDM-GCC\TDM-GCC-32\mingwvars.bat
----------- 
peter@PLUTO ~
$ sh /postinstall/pi.sh

This is a post install process that will try to normalize between
your MinGW install if any as well as your previous MSYS installs
if any.  I don't have any traps as aborts will not hurt anything.
Do you wish to continue with the post install? [yn ] y

Do you have MinGW installed? [yn ] y

Please answer the following in the form of c:/foo/bar.
Where is your MinGW installation? c:/TDM-GCC/TDM-GCC-32

Creating /etc/fstab with mingw mount bindings.
        Normalizing your MSYS environment.

You have script /bin/cmd
You have both /bin/ftp.exe and /bin/ftp.
Removing /bin/ftp.

Oh joy, you do not have c:/TDM-GCC/TDM-GCC-32/bin/make.exe. Keep it that way.

peter@PLUTO ~
-----------



Download strawberry-perl (I've downloaded 5.18.1.1-32bit, but any more recent version should do).
I removed strawberry-perl's own gcc (e.g. in E:\strawberry\c\bin) from %PATH% 

UPDATE: 26.Apr 2015
strawberry-perl-5.18.1.1-32bit-portable.zip
after unpacking, add
C:\strawberry-perl-5.18.1.1-32bit-portable\perl\bin 
to %PATH%


In a windows cmd shell, your PATH environment variable contains these entries
%PATH%;C:\Program Files\CMake 2.8\bin;D:\TDM-GCC\TDM-GCC-32\bin
and the System-PATH
C:\Program Files\NVIDIA Corporation\PhysX\Common;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files\Microsoft Windows Performance Toolkit\;C:\Program Files\TortoiseSVN\bin;E:\strawberry\perl\site\bin;E:\strawberry\perl\bin

(UPDATE 26.Apr 2015: the two strawberry perl entries in the system path were probably generated by the installer, but it should be fine to just use the portable version and set only the perl\bin path as explained in the following)


Building Qt with the mingw compiler
===================================

Following the advice given here
http://qt-project.org/wiki/Building_Qt_Desktop_for_Windows_with_MinGW
I used these slightly modified steps:

0.) Download Qt from http://qt-project.org/downloads
I downloaded
http://download.qt-project.org/official_releases/qt/4.8/4.8.5/qt-everywhere-opensource-src-4.8.5.zip
and extracted to
G:\qt\qt-everywhere-opensource-src-4.8.5

1.) Put "configure.cache" in C:\Qt\4.8.5. This is where the Qt build will be created.

In "configure.cache" write:
---------------------------
-platform win32-g++ -opensource 
-debug -debug-and-release
-no-phonon 
-no-phonon-backend 
-no-webkit 
-fast 
-no-3dnow
-no-dsp 
-no-vcproj 
-no-cetest 
-no-s60 
-qt-sql-odbc -qt-sql-sqlite -plugin-sql-odbc -plugin-sql-sqlite 
-no-incredibuild-xge

NOTE: in order to only build the "release" Qt libraries, specify
-release 
instead of
-debug -debug-and-release
[for more switches: http://radekp.github.io/qtmoko/api/buildsystem/over-configure-options-qt-1.html
and a discussion about threads: https://forum.qt.io/topic/20246/qmake-config-variable-thread/5]

NOTE 2: finding out, which flags were used to build the installer version (shown here for the Qt 4.8.4 installer)
qt-project.org/forums/viewthread/215

C:\Qt\4.8.4\mkspecs\qconfig.pri
CONFIG+= debug shared stl exceptions rtti mmx 3dnow sse sse2
QT_ARCH = windows
QT_EDITION = OpenSource
QT_CONFIG += release debug zlib png accessibility qt3support opengl s60 ipv6 xmlpatterns native-gestures svg concurrent minimal-config small-config medium-config large-config full-config
#versioning 
QT_VERSION = 4.8.4
QT_MAJOR_VERSION = 4
QT_MINOR_VERSION = 8
QT_PATCH_VERSION = 4
#Qt for Windows CE c-runtime deployment
QT_CE_C_RUNTIME = no
#Qt for Symbian FPU settings

or here: C:\Qt\4.8.4\configure.cache
-opensource 
-platform 
win32-msvc2010 
-no-webkit 
-no-phonon 
-no-phonon-backend 
-no-script 
-no-multimedia 
-fast 



2.) Open a cmd-shell (WindowsKey + R, then type "cmd").

3.) C:\Qt\4.8.5>set PATH=D:\TDM-GCC\TDM-GCC-32\bin;C:\Windows\system32;<PATH to your perl installation's bin directory>
(some tools that are mentioned on the Qt-website should not be needed... if I'm mistaken, just make sure to put them in the PATH as well, like this: ... G:\qt-install-tools\fart199b_win32;G:\qt-install-tools\jom; ... )
on my system the PATH variable now looks like this:
PATH=D:\TDM-GCC\TDM-GCC-32\bin;C:\strawberry-perl-5.18.1.1-32bit-portable\perl\bin;C:\Windows\system32
and
QMAKESPEC=win32-g++

UPDATE 26.Apr.2015
C:\Qt\4.8.5>set PATH=C:\TDM-GCC\TDM-GCC-32\bin;C:\strawberry-perl-5.18.1.1-32bit-portable\perl\bin;C:\Windows\system32
C:\Qt\4.8.5>set QMAKESPEC=win32-g++
C:\Qt\4.8.5>E:\EVAN-related\qt-everywhere-opensource-src-4.8.5\configure.exe -redo


4.) C:\Qt\4.8.5>G:\qt\qt-everywhere-opensource-src-4.8.5\configure.exe  -redo

Alternatively, or if the steps above fail, you could skip the creation of a configure.cache file and call configure.exe with lots of arguments as demonstrated in buildQt.bat. The batch script file is located in the same directory as this text file.


5.) C:\Qt\4.8.5>mingw32-make


After having successfully built the Qt lib
==========================================
The 2 following files are there for your convenience - double-clicking "qt-4.8.5.-shell.bat" will bring up a shell with the necessary PATH configs for working with Qt. Both batch files are already present in the same folder as this text file. Here their content is reproduced:

In "qt-4.8.5-shell.bat" write:
------------------------------
%COMSPEC% /k qt-4.8.5-envvars.bat

In "qt-4.8.5-envvars.bat" write:
--------------------------------
@echo off
rem
rem This file is generated by the Qt installer
rem

echo Setting up a Qt environment...

set QTDIR=C:\Qt\4.8.5
echo -- QTDIR set to C:\Qt\4.8.5
set PATH=C:\Qt\4.8.5\bin;%PATH%
echo -- Added C:\Qt\4.8.5\bin to PATH
set QMAKESPEC=win32-g++
echo -- QMAKESPEC set to "win32-g++"

