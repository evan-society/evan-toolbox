This file is a rather loose collection of my experience building the libraries that OSG depends on, as well as OSG itself. It should not be necessary to rebuild OSG at this moment, since OSG is prebuilt for the currently used library- and compiler version for Windows. Of course, changing any libray or porting to another compiler/platform makes a rebuild necessary - this is where this text file comes into play...

In the same directory as this file you will find two shell scripts, namely './runCmakeOSG.sh' as well as './runCmakeOSG-FreetypeDifference-dontKnow-butProbablyWrong.sh' for building OSG (in case you get build errors related to the Freetype lib with one of the shell scripts, just try the other shell script). Of course, make sure to modify the path variables at the top of the shell scripts accordingly before running them.

Note that I also pasted console logs for unsuccessful build attempts - often there is a follow-up, however, explaining a different procedure to resolve the issue. I hope that this isn't too confusing and that you'll find them helpful ;-)

The general folder structure that I used when building the libs was organized like this:
Source code was put into a folder named
/e/3rdParty/libName-X.Y.Z
And the make-install output was redirected to
/e/3rdParty-build/libName-X.Y.Z


Some links:
===========
http://trac.openscenegraph.org/projects/osg//wiki/Downloads/GIT
https://github.com/openscenegraph/osg

used this url to checkout the git repository
git://github.com/openscenegraph/osg.git

switch to tag "Branch_OpenSceneGraph-2.9.16" (the latest 2.x version)
[NOTE: finally using OSG-3.0.1, but build instructions are the same]

* basic info from
http://www.multigesture.net/articles/how-to-compile-openscenegraph-2-x-using-mingw/




-----------
FFmpeg
https://trac.ffmpeg.org/wiki/MingwCompilationGuide

==> NOTE: we don't even need ffmpeg, so we can just skip this step!!!


edit the path, so that the git bin and cmd paths are located after the corresponding MinGW bin directory.
on my system:
C:\Program Files\Git\bin
which was installed from "Git-1.8.4-preview20130916.exe"

NOTE: had a bug:
peter@peter-PC /e/ffmpeg-git/ffmpeg
$ make
common.mak:140: *** missing separator.  Stop.
==> http://ffmpeg-users.933282.n4.nabble.com/compiles-error-common-mak-140-missing-separator-Stop-td4662017.html
so, performed
git config --global core.autocrlf false
before checkout of the ffmpeg lib
(also here: https://ffmpeg.org/trac/ffmpeg/ticket/1209)

git install - checkout from
git://source.ffmpeg.org/ffmpeg.git
version release 2.1; git-bash output:
peter@PETER-PC /e/ffmpeg-git/ffmpeg (master)
$ version.sh
N-57959-g7c02a77

downloaded "yasm-1.2.0-win32.exe" from
http://yasm.tortall.net/Download.html
and put it in folder E:\yasm; also copied it and renamed the copy to yasm.exe
added E:\yasm to User-PATH



got package config from
http://www.gtk.org/download/win32.php
GTK+ 3.6.4 is the current maintained version.
GLib	2.34.3	Run-time
gettext-runtime	0.18.2.1	Run-time
pkg-config	0.28	Tool

in msys, type:
peter@peter-PC /e/ffmpeg-git/ffmpeg
otherwise "struct timespec" is undefined (POSIX)
CFLAGS=-std=gnu99 
CXXFLAGS=-std=gnu99
$ ./configure --prefix=/e/ffmpeg-build
(see https://www.gnu.org/prep/standards/standards.html#Configuration)

==> finally i cross compiled from Linux
cross compiler (from Zeranoe which is working for ffmpeg)
http://mxe.cc/
http://pub.ist.ac.at/~schloegl/src/mxe/
-------------



-------------
zlib building:

basic info from
http://wiki.openttd.org/Compiling_on_Windows_using_MinGW#Compiling_zlib
however, added 'SHARED_MODE=1' in order to build the DLL, too
(after reading ./zlib-1.2.8/win32/Makefile.gcc)

in an msys shell, type:

wget http://zlib.net/zlib-1.2.8.tar.gz
tar xvfz zlib-1.2.8.tar.gz
cd zlib-1.2.8
make -f win32/Makefile.gcc BINARY_PATH=/e/3rdParty-build/zlib-1.2.8/bin INCLUDE_PATH=/e/3rdParty-build/zlib-1.2.8/include LIBRARY_PATH=/e/3rdParty-build/zlib-1.2.8/lib SHARED_MODE=1 install

[
	NOTE: this should work as well (different parameter ordering)

	make install -fwin32/Makefile.gcc BINARY_PATH=/e/3rdParty-build/zlib-1.2.8/bin INCLUDE_PATH=/e/3rdParty-build/zlib-1.2.8/include LIBRARY_PATH=/e/3rdParty-build/zlib-1.2.8/lib SHARED_MODE=1
]

creates: 
zlib1.dll in the BINARY_PATH
zconf.h, zlib.h in the INCLUDE_PATH
libz.dll.a, libz.a in the LIBRARY_PATH (as well a pkconfig/zlib.pc)
--------------




--------------
http://download.savannah.gnu.org/releases/freetype/freetype-2.4.0.tar.bz2

[ regarding dependency on zlib - from : http://www.freetype.org/freetype2/
  Some modules need external libraries (e.g., for handling fonts compressed with gzip or bz2), 
  however, they are optional and can be disabled. ]

peter@peter-PC /e/3rdParty/freetype-2.4.0
$ ./configure --prefix=/e/3rdParty-build/freetype-2.4.0/
make
make install

==> new for 2.4.12 and accounting for cmake-built zlib:
(note: specifying --build did not change anything)

$ export PATH=.:/usr/local/bin:/mingw/bin:/bin:/c/Windows/system32:"/c/Program Files/CMake 2.8/bin":/d/TDM-GCC/TDM-GCC-32/bin

peter@peter-PC /e/3rdParty/freetype-2.4.12
$ ./configure --prefix=/e/3rdParty-build/freetype-2.4.12 --without-bzip2 CFLAGS="-I/e/3rdParty-build/zlib-1.2.8/include" CPPFLAGS="-I/e/3rdParty-build/zlib-1.2.8/include" LDFLAGS="-L/e/3rdParty-build/zlib-1.2.8/lib"
--------------


-------------
NOTE: curl-7.33 is missing "curl/types.h" ==> using curl-7.20 instead

peter@peter-PC /e/3rdParty/curl-7.20.1
$ ./configure --prefix=/e/3rdParty-build/curl-7.20.1

configure: Configured to build curl/libcurl:

  curl version:    7.20.1
  Host setup:      i686-pc-mingw32
  Install prefix:  /e/3rdParty-build/curl-7.20.1
  Compiler:        gcc
  SSL support:     no      (--with-ssl / --with-gnutls / --with-nss)
  SSH support:     no      (--with-libssh2)
  zlib support:    no      (--with-zlib)
  krb4 support:    no      (--with-krb4*)
  GSSAPI support:  no      (--with-gssapi)
  SPNEGO support:  no      (--with-spnego)
  c-ares support:  no      (--enable-ares)
  ipv6 support:    no      (--enable-ipv6)
  IDN support:     no      (--with-libidn)
  Build libcurl:   Shared=yes, Static=yes
  Built-in manual: enabled
  Verbose errors:  enabled (--disable-verbose)
  SSPI support:    no      (--enable-sspi)
  ca cert bundle:  no
  ca cert path:    no
  LDAP support:    enabled (winldap)
  LDAPS support:   no      (--enable-ldaps)
  RTSP support:    enabled
  Protocols:       DICT FILE FTP HTTP IMAP LDAP POP3 RTSP SMTP TELNET TFTP
  

just for info:
http://curl.haxx.se/download/curl-7.33.0.zip
peter@peter-PC /e/3rdParty/curl-7.33.0
$ ./configure --prefix=/e/3rdParty-build/curl-7.33.0/

...
  curl version:     7.33.0
  Host setup:       i686-pc-mingw32
  Install prefix:   /e/3rdParty-build/curl-7.33.0
  Compiler:         gcc
  SSL support:      no      (--with-{ssl,gnutls,nss,polarssl,cyassl,axtls,winssl,darwinssl} )
  SSH support:      no      (--with-libssh2)
  zlib support:     no      (--with-zlib)
  GSSAPI support:   no      (--with-gssapi)
  SPNEGO support:   no      (--with-spnego)
  TLS-SRP support:  no      (--enable-tls-srp)
  resolver:         default (--enable-ares / --enable-threaded-resolver)
  ipv6 support:     no      (--enable-ipv6)
  IDN support:      no      (--with-{libidn,winidn})
  Build libcurl:    Shared=yes, Static=no
  Built-in manual:  enabled
  --libcurl option: enabled (--disable-libcurl-option)
  Verbose errors:   enabled (--disable-verbose)
  SSPI support:     no      (--enable-sspi)
  ca cert bundle:   no
  ca cert path:     no
  LDAP support:     enabled (winldap)
  LDAPS support:    enabled
  RTSP support:     enabled
  RTMP support:     no      (--with-librtmp)
  metalink support: no      (--with-libmetalink)
  HTTP2 support:    disabled (--with-nghttp2)
  Protocols:        DICT FILE FTP GOPHER HTTP IMAP LDAP LDAPS POP3 RTSP SMTP TELNET TFTP

make
make install
-------------

-------------
http://prdownloads.sourceforge.net/freeglut/freeglut-2.8.1.tar.gz?download

peter@peter-PC /e/3rdParty/freeglut-2.8.1
$ ./configure --prefix=/e/3rdParty-build/freeglut-2.8.1

make
make install
-------------


-------------
https://sourceforge.net/projects/glew/files/glew/1.10.0/glew-1.10.0.zip/download

make
make install GLEW_DEST=/e/3rdParty-build/glew-1.10.0
-------------

-------------
http://www.libsdl.org/release/SDL-1.2.15.zip


peter@peter-PC /e/3rdParty/SDL-1.2.15
$ ./configure --prefix=/e/3rdParty-build/SDL-1.2.15

make 
make install

Libraries have been installed in:
   /e/3rdParty-build/SDL-1.2.15/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-LLIBDIR' linker flag

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.

-------------


-------------
http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz

peter@peter-PC /e/3rdParty/libiconv-1.14
$ ./configure --prefix=/e/3rdParty-build/libiconv-1.14  --enable-static=yes

make
make install
-------------

-------------
http://sourceforge.net/projects/giflib/files/latest/download
giflib-4.2.3.tar.bz2

peter@peter-PC /e/3rdParty/giflib-4.2.3
$ ./configure --prefix=/e/3rdParty-build/giflib-4.2.3

make
make install

==> error message, but probably is related only to messed-up doc... just ignore the error

NOTE: giflib needed
https://fedorahosted.org/releases/x/m/xmlto/xmlto-0.0.25.tar.bz2

peter@peter-PC /e/3rdParty/xmlto-0.0.25
$ ./configure --prefix=/e/3rdParty-build/xmlto-0.0.25


which itself needed
http://software.frodo.looijaard.name/getopt/files/getopt-1.1.5.tar.gz
just type 'make'
but needs libintl.h header... 
-------------

-------------
http://www.ijg.org/files/jpegsrc.v9.tar.gz

peter@peter-PC /e/3rdParty/jpeg-9
$ ./configure --prefix=/e/3rdParty-build/jpeg-9

make
make install
-------------

----
http://sourceforge.net/projects/libpng/files/libpng16/1.6.7/
http://sourceforge.net/projects/libpng/files/libpng16/1.6.7/libpng-1.6.7.tar.gz/download

from file INSTALL:
...
Before installing libpng, you must first install zlib, if it
is not already on your system.  zlib can usually be found
wherever you got libpng.  zlib can be placed in another directory,
at the same level as libpng.

If your system already has a preinstalled zlib you will still need
to have access to the zlib.h and zconf.h include files that
correspond to the version of zlib that's installed.

If you wish to test with a particular zlib that is not first in the
standard library search path, put ZLIBLIB, ZLIBINC, CPPFLAGS, LDFLAGS,
and LD_LIBRARY_PATH in your environment before running "make test"
or "make distcheck":

ZLIBLIB=/path/to/lib export ZLIBLIB
ZLIBINC=/path/to/include export ZLIBINC
CPPFLAGS="-I$ZLIBINC" export CPPFLAGS
LDFLAGS="-L$ZLIBLIB" export LDFLAGS
LD_LIBRARY_PATH="$ZLIBLIB:$LD_LIBRARY_PATH" export LD_LIBRARY_PATH

If you are using one of the makefile scripts, put ZLIBLIB and ZLIBINC
in your environment and type "make ZLIBLIB=$ZLIBLIB ZLIBINC=$ZLIBINC test".
...


in windows-cmd prompt:
E:\libpng-1.6.7-cmake-build>set PATH=D:\TDM-GCC\TDM-GCC-32\bin;C:\Program Files\CMake 2.8\bin;C:\Windows\system32
E:\libpng-1.6.7-cmake-build>cmake-gui e:\3rdParty\libpng-1.6.7
MinGW Makefiles & Use Native Compilers

Commandline options:
-DCMAKE_INSTALL_PREFIX:PATH="e:/3rdParty-build/libpng-1.6.7" -DCMAKE_BUILD_TYPE:STRING="Release" 
Cache file:
CMAKE_INSTALL_PREFIX:PATH=e:/3rdParty-build/libpng-1.6.7
CMAKE_BUILD_TYPE:STRING=Release

E:\libpng-1.6.7-cmake-build>cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX:PATH="e:/3rdParty-build/libpng-1.6.7" -DCMAKE_BUILD_TYPE:STRING="Release" -DZLIB_INCLUDE_DIR:PATH="E:/3rdParty-build/zlib-1.2.8/include" -DZLIB_LIBRARY:PATH="E:/3rdParty-build/zlib-1.2.8/lib/libz.a"  e:\3rdParty\libpng-1.6.7

E:\libpng-1.6.7-cmake-build>mingw32-make

*** NOTE: tdm-gcc installed zlib version matches the above chosen zlib install version!!!
E:\libpng-1.6.7-cmake-build>cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX:PATH="e:/3rdParty-build/libpng-1.6.7" -DCMAKE_BUILD_
TYPE:STRING="Release" -DZLIB_INCLUDE_DIR:PATH="E:/3rdParty-build/zlib-1.2.8/include" e:\3rdParty\libpng-1.6.7
==>* -- Found ZLIB: D:/TDM-GCC/TDM-GCC-32/bin/zlib1.dll (found version "1.2.8")
-- Configuring done
-- Generating done
-- Build files have been written to: E:/libpng-1.6.7-cmake-build

*** this time with specifically downloaded zlib ==> matches!!
E:\libpng-1.6.7-cmake-build>cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX:PATH="e:/3rdParty-build/libpng-1.6.7" -DCMAKE_BUILD_
TYPE:STRING="Release" -DZLIB_INCLUDE_DIR:PATH="E:/3rdParty-build/zlib-1.2.8/include" -DZLIB_LIBRARY:PATH="E:/3rdParty-build/zlib-1.2.8/lib/libz.a"  e:\3rdParty\libpng-1.6.7
-- The C compiler identification is GNU 4.8.1
-- Check for working C compiler: D:/TDM-GCC/TDM-GCC-32/bin/gcc.exe
-- Check for working C compiler: D:/TDM-GCC/TDM-GCC-32/bin/gcc.exe -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
==>* -- Found ZLIB: E:/3rdParty-build/zlib-1.2.8/lib/libz.a (found version "1.2.8")
-- Configuring done
-- Generating done
-- Build files have been written to: E:/libpng-1.6.7-cmake-build


*** or building from MSYS (BUT: finally 'make install' fails!!!):
$ export PATH=.:/usr/local/bin:/mingw/bin:/bin:/c/Windows/system32:"/c/Program Files/CMake 2.8/bin":/d/TDM-GCC/TDM-GCC-32/bin

peter@peter-PC /e/libpng-1.6.7-cmake-build
$ cmake -G "MSYS Makefiles" -DCMAKE_INSTALL_PREFIX="/e/3rdParty-build/libpng-1.6.7" -DCMAKE_BUILD_TYPE="Release" -DZLIB_INCLUDE_DIR="/e/3rdParty-build/zlib-1.2.8/include" -DZLIB_LIBRARY="/e/3rdParty-build/zlib-1.2.8/lib/libz.a"  /e/3rdParty/libpng-1.6.7

peter@peter-PC /e/libpng-1.6.7-cmake-build
$ make

peter@peter-PC /e/libpng-1.6.7-cmake-build
$ make install

*** again with cmd and fixed zlib:
E:\libpng-1.6.7-cmake-build>echo %PATH%
C:\Program Files\CMake 2.8\bin;D:\TDM-GCC\TDM-GCC-32\bin

E:\libpng-1.6.7-cmake-build>cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX:PATH="e:/3rdParty-build/libpng-1.6.7" -DCMAKE_BUILD_TYPE:STRING="Release" -DZLIB_INCLUDE_DIR:PATH="E:/3rdParty-build/zlib-1.2.8/include" -DZLIB_LIBRARY:PATH="E:/3rdParty-build/zlib-1.2.8/lib/libz.a"  e:\3rdParty\libpng-1.6.7

E:\libpng-1.6.7-cmake-build>mingw32-make install

----


-------------
ftp://ftp.remotesensing.org/pub/libtiff/tiff-3.9.7.zip

export PATH=.:/usr/local/bin:/mingw/bin:/bin:/c/Windows/system32:"/c/Program Files/CMake 2.8/bin":/d/TDM-GCC/TDM-GCC-32/bin

peter@peter-PC /e/3rdParty/tiff-3.9.7
$ ./configure --prefix="/e/3rdParty-build/tiff-3.9.7" --with-zlib-include-dir="/e/3rdParty-build/zlib-1.2.8/include" --with-zlib-lib-dir="/e/3rdParty-build/zlib-1.2.8/lib" --with-jpeg-include-dir="/e/3rdParty-build/jpeg-9/include" --with-jpeg-lib-dir="/e/3rdParty-build/jpeg-9/lib" CFLAGS="-I/e/3rdParty-build/freeglut-2.8.1/include" LDFLAGS="-L/e/3rdParty-build/freeglut-2.8.1/lib" CPPFLAGS=$CFLAGS 

NOTE (changed later): the --with-jpeg-* flags seem to result in undefined references when building DCMTK later on ==>
$ ./configure --prefix="/e/3rdParty-build/tiff-3.9.7" --with-zlib-include-dir="/e/3rdParty-build/zlib-1.2.8/include" --with-zlib-lib-dir="/e/3rdParty-build/zlib-1.2.8/lib"  CFLAGS="-I/e/3rdParty-build/freeglut-2.8.1/include" LDFLAGS="-L/e/3rdParty-build/freeglut-2.8.1/lib" CPPFLAGS=$CFLAGS 
NOTE2 (related to tiff-with-jpeg-support-issue when building DCMTK) ==> maybe somehow specify to use static lib or only build static jpeg...?
peter@peter-PC /e/3rdParty/jpeg-9
$ ./configure --help
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]


# don't know if -lglut or -lglut.dll, so didn't append the LIBS-flag
# LIBS="-lglut"


with the complete cmd line (still no OpenGL support...):
...
checking for windows.h... yes
checking for OpenGL library... -lopengl32
checking for OpenGL Utility library... -lglu32
checking for GLUT library... -lglut
checking that generated files are newer than configure... done
...
Libtiff is now configured for i686-pc-mingw32

  Installation directory:             /e/3rdParty-build/tiff-3.9.7
  Documentation directory:            ${prefix}/share/doc/tiff-3.9.7
  C compiler:                         gcc -std=gnu99 -I/e/3rdParty-build/freeglut-2.8.1/include -Wall -W
  C++ compiler:                       g++ -g -O2
  Enable runtime linker paths:        no
  Enable linker symbol versioning:    no
  Support Microsoft Document Imaging: yes

 Support for internal codecs:
  CCITT Group 3 & 4 algorithms:       yes
  Macintosh PackBits algorithm:       yes
  LZW algorithm:                      yes
  ThunderScan 4-bit RLE algorithm:    yes
  NeXT 2-bit RLE algorithm:           yes
  LogLuv high dynamic range encoding: yes

 Support for external codecs:
  ZLIB support:                       yes
  Pixar log-format algorithm:         yes
  JPEG support:                       yes
  Old JPEG support:                   yes
  ISO JBIG support:                   no

  C++ support:                        yes

  OpenGL support:                     no
  

with the complete command line above without the freeglut-env-vars, i got (beforehand i used solely the --prefix flag):
...
checking for windows.h... yes
checking for OpenGL library... -lopengl32
checking for OpenGL Utility library... -lglu32
checking for GLUT library... no
checking that generated files are newer than configure... done
...
Libtiff is now configured for i686-pc-mingw32

  Installation directory:             /e/3rdParty-build/tiff-3.9.7
  Documentation directory:            ${prefix}/share/doc/tiff-3.9.7
  C compiler:                         gcc -std=gnu99 -g -O2 -Wall -W
  C++ compiler:                       g++ -g -O2
  Enable runtime linker paths:        no
  Enable linker symbol versioning:    no
  Support Microsoft Document Imaging: yes

 Support for internal codecs:
  CCITT Group 3 & 4 algorithms:       yes
  Macintosh PackBits algorithm:       yes
  LZW algorithm:                      yes
  ThunderScan 4-bit RLE algorithm:    yes
  NeXT 2-bit RLE algorithm:           yes
  LogLuv high dynamic range encoding: yes

 Support for external codecs:
  ZLIB support:                       yes
  Pixar log-format algorithm:         yes
  JPEG support:                       yes
  Old JPEG support:                   yes
  ISO JBIG support:                   no

  C++ support:                        yes

  OpenGL support:                     no

when using only the --prefix flag, i got:

Libtiff is now configured for i686-pc-mingw32

  Installation directory:             /e/3rdParty-build/tiff-3.9.7
  Documentation directory:            ${prefix}/share/doc/tiff-3.9.7
  C compiler:                         gcc -std=gnu99 -g -O2 -Wall -W
  C++ compiler:                       g++ -g -O2
  Enable runtime linker paths:        no
  Enable linker symbol versioning:    no
  Support Microsoft Document Imaging: yes

 Support for internal codecs:
  CCITT Group 3 & 4 algorithms:       yes
  Macintosh PackBits algorithm:       yes
  LZW algorithm:                      yes
  ThunderScan 4-bit RLE algorithm:    yes
  NeXT 2-bit RLE algorithm:           yes
  LogLuv high dynamic range encoding: yes

 Support for external codecs:
  ZLIB support:                       no
  Pixar log-format algorithm:         no
  JPEG support:                       no
  Old JPEG support:                   no
  ISO JBIG support:                   no

  C++ support:                        yes

  OpenGL support:                     no


peter@peter-PC /e/3rdParty/tiff-3.9.7
$ make install

-------------


-------------
ftp://xmlsoft.org/libxml2/libxml2-2.9.1.tar.gz

$ echo $PATH
.:/usr/local/bin:/mingw/bin:/bin:/c/Windows/system32:/c/Program Files/CMake 2.8/bin:/d/TDM-GCC/TDM-GCC-32/bin

peter@peter-PC /e/3rdParty/libxml2-2.9.1
$ ./configure --prefix=/e/3rdParty-build/libxml2-2.9.1 --with-zlib="/e/3rdParty-build/zlib-1.2.8" --with-iconv="/e/3rdParty-build/libiconv-1.14"

...
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
Checking zlib
checking zlib.h usability... yes
checking zlib.h presence... yes
checking for zlib.h... yes
checking for gzread in -lz... yes
Checking lzma
...
Enabling multithreaded support
checking iconv.h usability... yes
checking iconv.h presence... yes
checking for iconv.h... yes
checking for iconv... no
checking for iconv in -liconv... yes
checking for iconv declaration...
        extern size_t iconv (iconv_t cd,  char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);
Disabling ICU support
...


make install
-------------

-------------
building OSG itself:
wrote a short shell script which sets all necessary paths etc.
simply execute it from a different directory than the one into which you want OSG to be built
the directory from which you execute the shell script will contain the cmake output
NOTE: use a different directory than the one into which OSG git source was cloned into
the shell script expects as its single argument the path to the OSG base directory 

NOTE: there were some issues related to the freetype lib, so I actually added two shell scripts, namely 'runCmakeOSG.sh' and 'runCmakeOSG-FreetypeDifference-dontKnow-butProbablyWrong.sh'. As the name implies, the second one should be the incorrect one, but I added it for reference anyway...

for example:

peter@peter-PC /e/OSG-2.9.16-cmake-build
$ ./runCmakeOSG.sh /e/OSG-git/osg/

****
NOTE: later on, when building EVAN TOOLKIT i found out that osgGA::TrackballManipulator::calcMovement is missing in this version... so i checked out OSG-2.9.8

peter@peter-PC /e/OSG-2.9.8-cmake-build
$ ./runCmakeOSG.sh /e/OSG-git/osg/

make ran into an error at about 16%
E:\OSG-git\osg\src\osgUtil\tristripper\include\public_types.h
==> added 
#include <cstddef>

however at some of the last QtOsgViewer [or something like that] 'make' failed
==> using 2.9.16 and changed calcMovement() to performMovement() [or something like that]
****


Test with OSG 3.0.1 - WORKS!!! also using freetype-2.4.12 now
created /e/OSG-3.0.1-cmake-build
copied runCmakeOSG.sh into this directory
solely changed:
OSG_VER="OSG-3.0.1"
and since otherwise the freetype2-subdir include folder is not found:
-DCMAKE_CXX_FLAGS="-I${THIRD_PARTY_PATH}/${FREETYPE_VER}/include/freetype2" \
and not using ffmpeg anymore

$ echo $PATH
.:/usr/local/bin:/mingw/bin:/bin:/c/Windows/system32:/c/Program Files/CMake 2.8/bin:/d/TDM-GCC/TDM-GCC-32/bin

peter@peter-PC /e/OSG-3.0.1-cmake-build
$ ./runCmakeOSG.sh /e/OpenSceneGraph-3.0.1/


as all previous commands, run it from the msys shell

make
make install
-------------

-------------
OSG-3.0.1 with qt-5.0.2 ==> nope, only >= 3.2.0 seems to work with Qt 5

peter@peter-PC /e/OSG-3.2.0_qt-5.0.2-cmake-build
$ PATH=/d/TDM-GCC/TDM-GCC-32/bin:"/c/Program Files/CMake 2.8/bin":/c/Windows/system32

peter@peter-PC /e/OSG-3.2.0_qt-5.0.2-cmake-build
$ echo $PATH
/d/TDM-GCC/TDM-GCC-32/bin:/c/Program Files/CMake 2.8/bin:/c/Windows/system32

peter@peter-PC /e/OSG-3.2.0_qt-5.0.2-cmake-build
$ export

peter@peter-PC /e/OSG-3.2.0_qt-5.0.2-cmake-build
$ QMAKESPEC=/e/qt/qt-5.0.2/qtbase/mkspecs/win32-g++/

peter@peter-PC /e/OSG-3.2.0_qt-5.0.2-cmake-build
$ QTDIR=/e/qt/qt-5.0.2/qtbase/

./runCmakeOSG.sh /e/OpenSceneGraph-3.2.0/
failed with MSYS Makefile...


==> windows cmd line
E:\OSG-3.2.0_qt-5.0.2-cmake-build>echo %PATH%
	
set PATH=D:\TDM-GCC\TDM-GCC-32\bin;"c:\Program Files\CMake 2.8\bin";c:\Windows\system32


E:\OSG-3.2.0_qt-5.0.2-cmake-build>runCmakeOSG.bat e:\OpenSceneGraph-3.2.0\
E:\OSG-3.2.0_qt-5.0.2-cmake-build>mingw32-make
E:\OSG-3.2.0_qt-5.0.2-cmake-build>mingw32-make install

-------------


...
and some tests of OSG:

peter@peter-PC /e/3rdParty-build/OSG-2.9.16/bin
$ PATH=$PATH:/e/qt/qt-4.8.5/bin/

peter@peter-PC /e/3rdParty-build/OSG-2.9.16/bin
$ ../share/OpenSceneGraph/bin/osgviewerQt.exe

peter@peter-PC /e/3rdParty-build/OSG-2.9.16/bin
$ PATH=$PATH:/e/3rdParty-build/SDL-1.2.15/bin/