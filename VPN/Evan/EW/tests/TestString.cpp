// wdkg 2008-2010
// XXX ? scan_ return l, -1 for error
// XXX ? format return false if not enough spaace
// XXX eliminate struct, new, BYTEORDER, union
// XXX use data files

#include <cstring>
#include <cstdio>
#include <stdint.h>

#include <float.h>
// XXX These 2 do are not standard C but are POSIX and are in mingw.
#include <sys/types.h>
#include <sys/param.h>

#include "ew/Debug.h"
#include "ew/String.h"
#include "ew/Time.h"
#include "TestString.h"

namespace {
  const char Name[] = "test_string";
  const char Desc[] = "Exercise ew::String scan and format methods.\n";
  const char DebugVal[] = "timing";
  ewtst::TestString Tst;
}

// Some of the binary values here are from David Gay's gdtoa source.
// Others are from http://babbage.cs.qc.edu/IEEE-754/Decimal.html.

static struct {
  const char *inp;
  int ws_r;
  int ws_l;
  int nws_r;
  int nws_l;
  int wsn_r;
  int wsn_l;
  int l_r;
  int l_l;
} TestData01[] = {
  {"", 0, 0, 0, 0, 0, 0, 0, 0},
  {"\n", 1, 1, 0, 0, 0, 0, 1, 1},
  {"\n x", 1, 2, 0, 0, 0, 0, 1, 1},
  {"sfsd", 0, 0, 1, 4, 0, 0, 0, 4},
  {"sfsd\n", 0, 0, 1, 4, 0, 0, 1, 5},
  {"sfsd\nx ", 0, 0, 1, 4, 0, 0, 1, 5},
  {" \t\v\f\r", 1, 5, 0, 0, 1, 5, 0, 5},
  {" \t\v\f\rx", 1, 5, 0, 0, 1, 5, 0, 6},
  {" \t\v\f\r\n", 1, 6, 0, 0, 1, 5, 1, 6},
  {" a\n b\n", 1, 1, 0, 0, 1, 1, 1, 3},
  {0, 0, 0, 0, 0, 0, 0, 0, 0}
};

const char *
ewtst::TestString::test01(bool return_name)
{
  if (return_name) {
    return "scan whitespace";
  }
  for (int i = 0; TestData01[i].inp != 0; i += 1) {
    int r;
    const char *se;
    const char *s = TestData01[i].inp;
    r = ew::String::scan_ws(&se, s);
    if (r != TestData01[i].ws_r || se - s != TestData01[i].ws_l) {
      report_error("bad ws scan of \"%s\" r=%d l=%d", s, r, se - s);
    }
    r = ew::String::scan_not_ws(&se, s);
    if (r != (TestData01[i].nws_r == 1) || se - s != TestData01[i].nws_l) {
      report_error("bad nws scan of \"%s\" r=%d l=%d", s, r, se - s);
    }
    r = ew::String::scan_ws_not_nl(&se, s);
    if (r != (TestData01[i].wsn_r == 1) || se - s != TestData01[i].wsn_l) {
      report_error("bad wsn scan of \"%s\" r=%d l=%d", s, r, se - s);
    }
    r = ew::String::scan_line(&se, s);
    if (r != (TestData01[i].l_r == 1) || se - s != TestData01[i].l_l) {
      report_error("bad line scan of \"%s\": r=%d l=%d", s, r, se - s);
    }
  }
  return 0;
}

static struct {
  const char *inp;
  int r;
  int l;
  int v;
} TestData02[] = {
  {" 5", 0, 0, 9871},
  {"a5", 0, 0, 9871},
  {"--5", 0, 0, 9871},
  {"-+5", 0, 0, 9871},
  {"-", 0, 0, 9871},
  {"+", 0, 0, 9871},
  {"", 0, 0, 9871},
  {"0", 1, 1, 0},
  {"0 ", 1, 1, 0},
  {"0a", 1, 1, 0},
  {"0+", 1, 1, 0},
  {"-0", 1, 2, 0},
  {"+0", 1, 2, 0},
  {"+0000", 1, 5, 0},
  {"-0000 4", 1, 5, 0},
  {"-0000\n4", 1, 5, 0},
  {"-00004", 1, 6, -4},
  {"1.1e5", 1, 1, 1},
  {".1e5", 0, 0, 9871},
  {"21", 1, 2, 21},
  {"+21", 1, 3, 21},
  {"2147483647", 1, 10, 2147483647},
  {"-0002147483647", 1, 14, -2147483647},
  {"2147483648", -1, 10, 9871},
  {"21474836480", -1, 11, 9871},
  {"-2147483648", 1, 11, -2147483647-1},
  {"-2147483649", -1, 11, 9871},
  {0, 0, 0, 0}
};

const char *
ewtst::TestString::test02(bool return_name)
{
  if (return_name) {
    return "scan int";
  }
  for (int i = 0; TestData02[i].inp != 0; i += 1) {
    int v, r;
    const char *se;
    const char *s = TestData02[i].inp;
    v = 9871;
    r = ew::String::scan_int(&v, &se, s);
    if (r != (TestData02[i].r == 1) || se - s != TestData02[i].l ||
     v != TestData02[i].v) {
      report_error("bad scan of \"%s\": r=%d v=%d l=%d", s, r, v, se - s);
    }
  }
  const ew::Debug &dbg = ew::Debug::instance();
  char *buf = new char[13000000];
  int *ii0 = new int[1000000];
  int *ii1 = new int[1000000];
  int *ii2 = new int[1000000];
  const char *en;
  char *enc;
  for (int i = 0; i < 1000000; i += 1) {
//XXX take a high range of bits
    int r = random_int();
    std::sprintf(buf + 13 * i, "%d", r);
    ii0[i] = r;
  }
  double t0, t1, t2;
  if (dbg.get_active("timing")) {
    t0 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ii1[i] = strtol(buf + 13 * i, &enc, 10);
  }
  if (dbg.get_active("timing")) {
    t1 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ew::String::scan_int(ii2 + i, &en, buf + 13 * i);
  }
  if (dbg.get_active("timing")) {
    t2 = ew::Time::elapsed();
    dbg.dprintf("%s %14s stdio %.6f ew::String %.6f", "timing", "scan-int",
     t1 - t0, t2 - t1);
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (ii1[i] != ii2[i]) {
      report_error("strtol-scan discrepancy for %d", ii0[i]);
    }
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (ii0[i] != ii2[i]) {
      report_error("scan incorrect for %d", ii0[i]);
    }
  }
  delete[] buf;
  delete[] ii0;
  delete[] ii1;
  delete[] ii2;
  return 0;
}

static struct {
  int l;
  int v;
  const char *outp;
  int r;
  int le;
} TestData03[] = {
  {5, 21, "21\000defghijklmnopqrstuvwxyz", 1, 2},
  {3, 21, "21\000defghijklmnopqrstuvwxyz", 1, 2},
  {2, 21, "abcdefghijklmnopqrstuvwxyz", -1, 2},
  {0, 21, "abcdefghijklmnopqrstuvwxyz", -1, 2},
  {5, -1, "-1\000defghijklmnopqrstuvwxyz", 1, 2},
  {3, -1, "-1\000defghijklmnopqrstuvwxyz", 1, 2},
  {2, -1, "abcdefghijklmnopqrstuvwxyz", -1, 2},
  {0, -1, "abcdefghijklmnopqrstuvwxyz", -1, 2},
  {3, 0, "0\000cdefghijklmnopqrstuvwxyz", 1, 1},
  {2, 0, "0\000cdefghijklmnopqrstuvwxyz", 1, 1},
  {1, 0, "abcdefghijklmnopqrstuvwxyz", -1, 1},
  {0, 0, "abcdefghijklmnopqrstuvwxyz", -1, 1},
  {ew::String::FORMAT_INT_LEN, 2147483647, "2147483647\000lmnopqrstuvwxyz", 1,
   10},
  {10, 2147483647, "abcdefghijklmnopqrstuvwxyz", -1, 10},
  {ew::String::FORMAT_INT_LEN, -2147483647-1, "-2147483648\000mnopqrstuvwxyz",
   1, 11},
  {0, 0, 0, 0}
};

const char *
ewtst::TestString::test03(bool return_name)
{
  if (return_name) {
    return "format int";
  }
  for (int i = 0; TestData03[i].outp != 0; i += 1) {
    char s[27];
    std::strcpy(s, "abcdefghijklmnopqrstuvwxyz");
    int e;
    bool r = ew::String::format_int(s, TestData03[i].l, &e, TestData03[i].v);
    if (r != (TestData03[i].r == 1) || e != TestData03[i].le ||
     std::memcmp(s, TestData03[i].outp, 27) != 0) {
      report_error("bad format of %d l=%d: s=\"%s\" r=%d e=%d", TestData03[i].v,
       TestData03[i].l, s, r, e);
    }
  }
  const ew::Debug &dbg = ew::Debug::instance();
  int *ii = new int[1000000];
  char *buf1 = new char[13000000];
  char *buf2 = new char[13000000];
  for (int i = 0; i < 1000000; i += 1) {
    ii[i] = random_int();
  }
  double t0, t1, t2;
  if (dbg.get_active("timing")) {
    t0 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    sprintf(buf1 + i * 13, "%d", ii[i]);
  }
  if (dbg.get_active("timing")) {
    t1 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ew::String::format_int(buf2 + i * 13, 999, 0, ii[i]);
  }
  if (dbg.get_active("timing")) {
    t2 = ew::Time::elapsed();
    dbg.dprintf("%s %14s stdio %.6f ew::String %.6f", "timing", "format-int",
     t1 - t0, t2 - t1);
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (std::strcmp(buf1 + i * 13, buf2 + i * 13) != 0) {
      report_error("sprintf-format discrepancy for %d: \"%s\" \"%s\"", ii[i],
       buf1 + i * 13, buf2 + i * 13);
    }
  }
  delete[] ii;
  delete[] buf1;
  delete[] buf2;
  return 0;
}

static struct {
  const char *inp;
  int r;
  int l;
  unsigned char b[4];
} TestData04[] = {
  {" 5", 0, 0,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"21", 1, 2,
   {0x41, 0xa8, 0x00, 0x00}},
  {"21.0000", 1, 7,
   {0x41, 0xa8, 0x00, 0x00}},
  {"1.4", 1, 3,
   {0x3f, 0xb3, 0x33, 0x33}},
  {"+21.0000", 1, 8,
   {0x41, 0xa8, 0x00, 0x00}},
  {"-021.0000", 1, 9,
   {0xc1, 0xa8, 0x00, 0x00}},
  {"00021.0000", 1, 10,
   {0x41, 0xa8, 0x00, 0x00}},
  {"21e+17", 1, 6,
   {0x5d, 0xe9, 0x25, 0x97}},
  {"21e-17", 1, 6,
   {0x25, 0x72, 0x1d, 0x0f}},
  {"21e+xxx", 1, 2,
   {0x41, 0xa8, 0x00, 0x00}},
  {"21e3456", 0, 7,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"21e-3456", 1, 8,
   {0x00, 0x00, 0x00, 0x00}},
  {"+21e-3456", 1, 9,
   {0x00, 0x00, 0x00, 0x00}},
  {"-21e-3456", 1, 9,
   {0x80, 0x00, 0x00, 0x00}},
  {"-00.00", 1, 6,
   {0x80, 0x00, 0x00, 0x00}},
  {"+00.00", 1, 6,
   {0x00, 0x00, 0x00, 0x00}},
  {"0.33333333333333333", 1, 19,
   {0x3e, 0xaa, 0xaa, 0xab}},
  {"0.33333333333333333e-45", 1, 23,
   {0x00, 0x00, 0x00, 0x00}},
  {"0.33333333333333333e-42", 1, 23,
   {0x00, 0x00, 0x00, 0xee}},
  {"1.40129846e-45", 1, 14,
   {0x00, 0x00, 0x00, 0x01}},
  {"0.60129846e-45", 1, 14,
   {0x00, 0x00, 0x00, 0x00}},
  {"3.40282347e+38", 1, 14,
   {0x7f, 0x7f, 0xff, 0xff}},
  {"7.40282347e+38", 0, 14,
   {0x46, 0x1a, 0x3c, 0xcd}},
// These are from the gdtoa source testnos.
  {"1.23", 1, 4,
   {0x3f, 0x9d, 0x70, 0xa4}},
  {"1.23e+20", 1, 8,
   {0x60, 0xd5, 0x5e, 0xf9}},
  {"1.23e-20", 1, 8,
   {0x1e, 0x68, 0x57, 0x26}},
  {"1.23456789", 1, 10,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.2345679", 1, 9,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.2345659e+20", 1, 13,
   {0x60, 0xd6, 0x29, 0xbd}},
  {"1.23456589e+20", 1, 14,
   {0x60, 0xd6, 0x29, 0xbd}},
  {"1.23e+30", 1, 8,
   {0x71, 0x78, 0x65, 0x82}},
  {"1.23e-30", 1, 8,
   {0x0d, 0xc7, 0x94, 0x33}},
  {"1.23456789e-20", 1, 14,
   {0x1e, 0x69, 0x34, 0x0a}},
  {"1.2345679e-20", 1, 13,
   {0x1e, 0x69, 0x34, 0x0a}},
  {"1.23456789e-30", 1, 14,
   {0x0d, 0xc8, 0x51, 0xf2}},
  {"1.2345679e-30", 1, 13,
   {0x0d, 0xc8, 0x51, 0xf2}},
  {"1.234567890123456789", 1, 20,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.23456789012345678901234567890123456789", 1, 40,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.2345679", 1, 9,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.23e306", 0, 8,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"1.23e-306", 1, 9,
   {0x00, 0x00, 0x00, 0x00}},
  {"1.23e-320", 1, 9,
   {0x00, 0x00, 0x00, 0x00}},
  {"1.23e-20", 1, 8,
   {0x1e, 0x68, 0x57, 0x26}},
  {"1.23456789e307", 0, 14,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"1.23456589e-307", 1, 15,
   {0x00, 0x00, 0x00, 0x00}},
  {"1.234567890123456789", 1, 20,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.2345679", 1, 9,
   {0x3f, 0x9e, 0x06, 0x52}},
  {"1.234567890123456789e301", 0, 24,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"1.234567890123456789e-301", 1, 25,
   {0x00, 0x00, 0x00, 0x00}},
  {"1.234567890123456789e-321", 1, 25,
   {0x00, 0x00, 0x00, 0x00}},
  {"1e23", 1, 4,
   {0x65, 0xa9, 0x68, 0x16}},
  {"1e+23", 1, 5,
   {0x65, 0xa9, 0x68, 0x16}},
  {"1e310", 0, 5,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"Infinity", 0, 8,
   {0x46, 0x1a, 0x3c, 0xcd}},
  {"9.0259718793241475e-277", 1, 23,
   {0x00, 0x00, 0x00, 0x00}},
  {"9.025971879324147880346310405869e-277", 1, 37,
   {0x00, 0x00, 0x00, 0x00}},
  {"9.025971879324147880346310405868e-277", 1, 37,
   {0x00, 0x00, 0x00, 0x00}},
  {"2.2250738585072013e-308", 1, 23,
   {0x00, 0x00, 0x00, 0x00}},
  {"2.2250738585072014e-308", 1, 23,
   {0x00, 0x00, 0x00, 0x00}},
  {"1.1", 1, 3,
   {0x3f, 0x8c, 0xcc, 0xcd}},
  {"-1.1", 1, 4,
   {0xbf, 0x8c, 0xcc, 0xcd}},
  {"1.2", 1, 3,
   {0x3f, 0x99, 0x99, 0x9a}},
  {"-1.2", 1, 4,
   {0xbf, 0x99, 0x99, 0x9a}},
  {"1.3", 1, 3,
   {0x3f, 0xa6, 0x66, 0x66}},
  {"-1.3", 1, 4,
   {0xbf, 0xa6, 0x66, 0x66}},
  {"1.4", 1, 3,
   {0x3f, 0xb3, 0x33, 0x33}},
  {"-1.4", 1, 4,
   {0xbf, 0xb3, 0x33, 0x33}},
  {"1.5", 1, 3,
   {0x3f, 0xc0, 0x00, 0x00}},
  {"-1.5", 1, 4,
   {0xbf, 0xc0, 0x00, 0x00}},
  {"1.6", 1, 3,
   {0x3f, 0xcc, 0xcc, 0xcd}},
  {"-1.6", 1, 4,
   {0xbf, 0xcc, 0xcc, 0xcd}},
  {"1.7", 1, 3,
   {0x3f, 0xd9, 0x99, 0x9a}},
  {"-1.7", 1, 4,
   {0xbf, 0xd9, 0x99, 0x9a}},
  {"1.8", 1, 3,
   {0x3f, 0xe6, 0x66, 0x66}},
  {"-1.8", 1, 4,
   {0xbf, 0xe6, 0x66, 0x66}},
  {"1.9", 1, 3,
   {0x3f, 0xf3, 0x33, 0x33}},
  {"-1.9", 1, 4,
   {0xbf, 0xf3, 0x33, 0x33}},
  {0, 0, 0,
   {0x00, 0x00, 0x00, 0x00}}
};

//XXX time floats w and w/o short decimal representations
const char *
ewtst::TestString::test04(bool return_name)
{
  if (return_name) {
    return "scan float";
  }
  for (int i = 0; TestData04[i].inp != 0; i += 1) {
    float v;
    union {
      float v;
      unsigned char b[4];
    } u;
    for (int j = 0; j < 4; j += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
      u.b[j] = TestData04[i].b[3 - j];
#else
      u.b[j] = TestData04[i].b[j];
#endif
    }
    const char *se;
    const char *s = TestData04[i].inp;
    v = 9871.2;
    bool r = ew::String::scan_finite_float(&v, &se, s);
    if (r != (TestData04[i].r == 1) || se - s != TestData04[i].l ||
     std::memcmp(&v, &u.v, 4) != 0) {
      report_error("%d bad scan of \"%s\": r=%d v=%.17g(%.17g) l=%d", i, s, r,
       v, u.v, se - s);
    }
  }
  const ew::Debug &dbg = ew::Debug::instance();
  float *ff1 = new float[1000000];
  float *ff2 = new float[1000000];
  char *buf = new char[15000000];
  for (int i = 0; i < 1000000; i += 1) {
    sprintf(buf + 15 * i, "%.5f", i * 0.5e-4 + 3.21456);
  }
  const char *en;
  char *enc;
  double t0, t1, t2;
  t0 = ew::Time::elapsed();
  for (int i = 0; i < 1000000; i += 1) {
    ff1[i] = strtof(buf + 15 * i, &enc);
  }
  t1 = ew::Time::elapsed();
  for (int i = 0; i < 1000000; i += 1) {
    ew::String::scan_finite_float(ff2 + i, &en, buf + 15 * i);
  }
  t2 = ew::Time::elapsed();
  if (dbg.get_active("timing")) {
    dbg.dprintf("%s %14s stdio %.6f ew::String %.6f", "timing", "scan-float",
     t1 - t0, t2 - t1);
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (std::memcmp(ff1 + i, ff2 + i, 4) != 0) {
      report_error("strtof-scan discrepancy for %s: \"%.17g\" \"%.17g\"",
       buf[i * 15], ff1[i], ff2[i]);
    }
  }
  delete[] ff1;
  delete[] ff2;
  delete[] buf;
  return 0;
}

static struct {
  int l;
  unsigned char b[4];
  const char *outp;
  int r;
  int le;
} TestData05[] = {
//XXX 0 -0, inf, -inf, nan's
  {25, {0x40, 0x40, 0x00, 0x00},
   "3\000cdefghijklmnopqrstuvwxyz", 1, 1},
//XXX  {5, {0x3f, 0xf3, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae},
//XXX   "1.23\000fghijklmnopqrstuvwxyz", 1, 4},
  {2, {0x3f, 0x9d, 0x70, 0xa4},
   "abcdefghijklmnopqrstuvwxyz", -1, 24},
// These are from the gdtoa source testnos.
  {25, {0x3f, 0x9d, 0x70, 0xa4},
   "1.23\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x60, 0xd5, 0x5e, 0xf9},
   "1.23e+20\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x1e, 0x68, 0x57, 0x26},
   "1.23e-20\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x60, 0xd6, 0x29, 0xbd},
   "1.2345659e+20\000opqrstuvwxyz", 1, 13},
  {25, {0x71, 0x78, 0x65, 0x82},
   "1.23e+30\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x0d, 0xc7, 0x94, 0x33},
   "1.23e-30\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x1e, 0x69, 0x34, 0x0a},
   "1.2345679e-20\000opqrstuvwxyz", 1, 13},
  {25, {0x0d, 0xc8, 0x51, 0xf2},
   "1.2345679e-30\000opqrstuvwxyz", 1, 13},
  {25, {0x1e, 0x68, 0x57, 0x26},
   "1.23e-20\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x3f, 0x9e, 0x06, 0x52},
   "1.2345679\000klmnopqrstuvwxyz", 1, 9},
  {25, {0x65, 0xa9, 0x68, 0x16},
   "1e+23\000ghijklmnopqrstuvwxyz", 1, 5},
  {25, {0x7f, 0x80, 0x00, 0x00},
   "Infinity\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x00, 0x00, 0x00, 0x00},
   "0\000cdefghijklmnopqrstuvwxyz", 1, 1},
  {25, {0x3f, 0x8c, 0xcc, 0xcd},
   "1.1\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0x8c, 0xcc, 0xcd},
   "-1.1\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0x99, 0x99, 0x9a},
   "1.2\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0x99, 0x99, 0x9a},
   "-1.2\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xa6, 0x66, 0x66},
   "1.3\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xa6, 0x66, 0x66},
   "-1.3\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xb3, 0x33, 0x33},
   "1.4\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xb3, 0x33, 0x33},
   "-1.4\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xc0, 0x00, 0x00},
   "1.5\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xc0, 0x00, 0x00},
   "-1.5\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xcc, 0xcc, 0xcd},
   "1.6\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xcc, 0xcc, 0xcd},
   "-1.6\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xd9, 0x99, 0x9a},
   "1.7\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xd9, 0x99, 0x9a},
   "-1.7\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xe6, 0x66, 0x66},
   "1.8\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xe6, 0x66, 0x66},
   "-1.8\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xf3, 0x33, 0x33},
   "1.9\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf3, 0x33, 0x33},
   "-1.9\000fghijklmnopqrstuvwxyz", 1, 4},
  {0, {0, 0, 0, 0}, 0, 0, 0}
};

const char *
ewtst::TestString::test05(bool return_name)
{
  if (return_name) {
    return "format float";
  }
  for (int i = 0; TestData05[i].outp != 0; i += 1) {
    char s[27];
    std::strcpy(s, "abcdefghijklmnopqrstuvwxyz");
    union {
      float v;
      unsigned char b[4];
    } u;
    for (int j = 0; j < 4; j += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
      u.b[j] = TestData05[i].b[3 - j];
#else
      u.b[j] = TestData05[i].b[j];
#endif
    }
    int e;
    bool r = ew::String::format_float(s, TestData05[i].l, &e, u.v);
    if (r != (TestData05[i].r == 1) || e != TestData05[i].le ||
     std::memcmp(s, TestData05[i].outp, 27) != 0) {
      report_error("bad format of \"%s\" %g l=%d: s=\"%s\" r=%d e=%d",
       TestData05[i].outp, u.v, TestData05[i].l, s, r, e);
    }
  }
  const ew::Debug &dbg = ew::Debug::instance();
  float *ii = new float[1000000];
  char *buf1 = new char[26000000];
  char *buf2 = new char[26000000];
  for (int i = 0; i < 1000000; i += 1) {
    ii[i] = (i * 5 + 321456) / 100000.0;
  }
  double t0, t1, t2;
  if (dbg.get_active("timing")) {
    t0 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    sprintf(buf1 + i * 26, "%.5f", ii[i]);
  }
  if (dbg.get_active("timing")) {
    t1 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ew::String::format_float(buf2 + i * 26, 999, 0, ii[i]);
  }
  if (dbg.get_active("timing")) {
    t2 = ew::Time::elapsed();
    dbg.dprintf("%s %14s stdio %.6f ew::String %.6f", "timing", "format-float",
     t1 - t0, t2 - t1);
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (std::strcmp(buf1 + i * 26, buf2 + i * 26) != 0) {
      report_error("sprintf-format discrepancy for %g: \"%s\" \"%s\"", ii[i],
       buf1 + i * 26, buf2 + i * 26);
    }
  }
  delete[] ii;
  delete[] buf1;
  delete[] buf2;
  return 0;
}

static struct {
  const char *inp;
  int r;
  int l;
  unsigned char b[8];
} TestData06[] = {
  {" 5", 0, 0,
   {0x40, 0xc3, 0x47, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"21", 1, 2,
   {0x40, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"21.0000", 1, 7,
   {0x40, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"1.4", 1, 3,
   {0x3f, 0xf6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
  {"+21.0000", 1, 8,
   {0x40, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"-021.0000", 1, 9,
   {0xc0, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"00021.0000", 1, 10,
   {0x40, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"21e+17", 1, 6,
   {0x43, 0xbd, 0x24, 0xb2, 0xdf, 0xac, 0x52, 0x00}},
  {"21e-17", 1, 6,
   {0x3c, 0xae, 0x43, 0xa1, 0xec, 0x3c, 0xf7, 0x06}},
  {"21e+xxx", 1, 2,
   {0x40, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"21e3456", 0, 7,
   {0x40, 0xc3, 0x47, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"21e-3456", 1, 8,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"+21e-3456", 1, 9,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"-21e-3456", 1, 9,
   {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"-00.00", 1, 6,
   {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"+00.00", 1, 6,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"0.33333333333333333333", 1, 22,
   {0x3f, 0xd5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55}},
  {"0.33333333333333333e-328", 1, 24,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"0.33333333333333333e-318", 1, 24,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x8b}},
  {"4.9406564584124654e-324", 1, 23,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}},
  {"1.9406564584124654e-324", 1, 23,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"1.7976931348623157e+308", 1, 23,
   {0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}},
  {"3.7976931348623157e+308", 0, 23,
   {0x40, 0xc3, 0x47, 0x99, 0x99, 0x99, 0x99, 0x9a}},
// These are from the gdtoa source testnos.
  {"1.23", 1, 4,
   {0x3f, 0xf3, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae}},
  {"1.23e+20", 1, 8,
   {0x44, 0x1a, 0xab, 0xdf, 0x21, 0x45, 0xb4, 0x30}},
  {"1.23e-20", 1, 8,
   {0x3b, 0xcd, 0x0a, 0xe4, 0xcf, 0x76, 0x75, 0x31}},
  {"1.23456789", 1, 10,
   {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x83, 0xde, 0x1b}},
  {"1.23456589e+20", 1, 14,
   {0x44, 0x1a, 0xc5, 0x37, 0xa6, 0x60, 0xb9, 0x97}},
  {"1.23e+30", 1, 8,
   {0x46, 0x2f, 0x0c, 0xb0, 0x4e, 0x8f, 0xb7, 0x90}},
  {"1.23e-30", 1, 8,
   {0x39, 0xb8, 0xf2, 0x86, 0x6f, 0x50, 0x10, 0xab}},
  {"1.23456789e-20", 1, 14,
   {0x3b, 0xcd, 0x26, 0x81, 0x47, 0x1e, 0x7a, 0xda}},
  {"1.23456789e-30", 1, 14,
   {0x39, 0xb9, 0x0a, 0x3e, 0x33, 0xbb, 0xd9, 0x95}},
  {"1.234567890123456789", 1, 20,
   {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb}},
  {"1.23456789012345678901234567890123456789", 1, 40,
   {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb}},
  {"1.2345678901234567", 1, 18,
   {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb}},
  {"1.23e306", 1, 8,
   {0x7f, 0x7c, 0x06, 0x76, 0xcd, 0x1c, 0x61, 0xf5}},
  {"1.23e+306", 1, 9,
   {0x7f, 0x7c, 0x06, 0x76, 0xcd, 0x1c, 0x61, 0xf5}},
  {"1.23e-306", 1, 9,
   {0x00, 0x6b, 0xa3, 0xb8, 0x5d, 0xa3, 0x96, 0xe8}},
  {"1.23e-320", 1, 9,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xba}},
  {"1.23e-20", 1, 8,
   {0x3b, 0xcd, 0x0a, 0xe4, 0xcf, 0x76, 0x75, 0x31}},
  {"1.23456789e307", 1, 14,
   {0x7f, 0xb1, 0x94, 0xb1, 0x4b, 0xda, 0xec, 0xdc}},
  {"1.23456789e+307", 1, 15,
   {0x7f, 0xb1, 0x94, 0xb1, 0x4b, 0xda, 0xec, 0xdc}},
  {"1.23456589e-307", 1, 15,
   {0x00, 0x36, 0x31, 0x96, 0xbb, 0x98, 0x45, 0xfa}},
  {"1.234567890123456789", 1, 20,
   {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb}},
  {"1.2345678901234567", 1, 18,
   {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb}},
  {"1.234567890123456789e301", 1, 24,
   {0x7e, 0x72, 0x6f, 0x51, 0x75, 0xf5, 0x64, 0x13}},
  {"1.2345678901234568e+301", 1, 23,
   {0x7e, 0x72, 0x6f, 0x51, 0x75, 0xf5, 0x64, 0x13}},
  {"1.234567890123456789e-301", 1, 25,
   {0x01, 0x75, 0x2a, 0x64, 0xe3, 0x4b, 0xa0, 0xd3}},
  {"1.2345678901234567e-301", 1, 23,
   {0x01, 0x75, 0x2a, 0x64, 0xe3, 0x4b, 0xa0, 0xd3}},
  {"1.234567890123456789e-321", 1, 25,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
  {"1.235e-321", 1, 10,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
  {"1e23", 1, 4,
   {0x44, 0xb5, 0x2d, 0x02, 0xc7, 0xe1, 0x4a, 0xf6}},
  {"1e+23", 1, 5,
   {0x44, 0xb5, 0x2d, 0x02, 0xc7, 0xe1, 0x4a, 0xf6}},
  {"1e310", 0, 5,
   {0x40, 0xc3, 0x47, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"Infinity", 0, 8,
   {0x40, 0xc3, 0x47, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"9.0259718793241475e-277", 1, 23,
   {0x06, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"9.025971879324147880346310405869e-277", 1, 37,
   {0x06, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"9.025971879324147880346310405868e-277", 1, 37,
   {0x06, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"9.025971879324148e-277", 1, 22,
   {0x06, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"2.2250738585072013e-308", 1, 23,
   {0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"2.2250738585072014e-308", 1, 23,
   {0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"1.1", 1, 3,
   {0x3f, 0xf1, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"-1.1", 1, 4,
   {0xbf, 0xf1, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"1.2", 1, 3,
   {0x3f, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33}},
  {"-1.2", 1, 4,
   {0xbf, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33}},
  {"1.3", 1, 3,
   {0x3f, 0xf4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd}},
  {"-1.3", 1, 4,
   {0xbf, 0xf4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd}},
  {"1.4", 1, 3,
   {0x3f, 0xf6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
  {"-1.4", 1, 4,
   {0xbf, 0xf6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
  {"1.5", 1, 3,
   {0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"-1.5", 1, 4,
   {0xbf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"1.6", 1, 3,
   {0x3f, 0xf9, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"-1.6", 1, 4,
   {0xbf, 0xf9, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a}},
  {"1.7", 1, 3,
   {0x3f, 0xfb, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33}},
  {"-1.7", 1, 4,
   {0xbf, 0xfb, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33}},
  {"1.8", 1, 3,
   {0x3f, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd}},
  {"-1.8", 1, 4,
   {0xbf, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd}},
  {"1.9", 1, 3,
   {0x3f, 0xfe, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
  {"-1.9", 1, 4,
   {0xbf, 0xfe, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
// These are from the gdtoa source testnos3.
  {"9e0306", 1, 6,
   {0x7f, 0xa9, 0xa2, 0x02, 0x83, 0x68, 0x02, 0x2e}},
  {"4e-079", 1, 6,
   {0x2f, 0xa7, 0xb6, 0xd7, 0x1d, 0x20, 0xb9, 0x6c}},
  {"7e-261", 1, 6,
   {0x09, 0xeb, 0x8d, 0x7e, 0x32, 0xbe, 0x63, 0x96}},
  {"6e-025", 1, 6,
   {0x3a, 0xe7, 0x36, 0x1c, 0xb8, 0x63, 0xde, 0x62}},
  {"7e-161", 1, 6,
   {0x1e, 0xaf, 0x7e, 0x0d, 0xb3, 0x79, 0x9a, 0xa3}},
  {"7e0289", 1, 6,
   {0x7c, 0x1c, 0xbb, 0x54, 0x77, 0x77, 0xa2, 0x85}},
  {"5e0079", 1, 6,
   {0x50, 0x7a, 0xfc, 0xef, 0x51, 0xf0, 0xfb, 0x5f}},
  {"1e0080", 1, 6,
   {0x50, 0x8a, 0xfc, 0xef, 0x51, 0xf0, 0xfb, 0x5f}},
  {"7e-303", 1, 6,
   {0x01, 0x33, 0x33, 0x91, 0x31, 0xc4, 0x6f, 0x8b}},
  {"5e0152", 1, 6,
   {0x5f, 0xa3, 0x17, 0xe5, 0xef, 0x3a, 0xb3, 0x27}},
  {"5e0125", 1, 6,
   {0x5a, 0x07, 0xa2, 0xec, 0xc4, 0x14, 0xa0, 0x3f}},
  {"2e0126", 1, 6,
   {0x5a, 0x27, 0xa2, 0xec, 0xc4, 0x14, 0xa0, 0x3f}},
  {"7e-141", 1, 6,
   {0x22, 0xd5, 0x57, 0x0f, 0x59, 0xbd, 0x17, 0x8c}},
  {"4e-192", 1, 6,
   {0x18, 0x32, 0x3f, 0xf0, 0x6e, 0xea, 0x84, 0x7a}},
  {"9e0043", 1, 6,
   {0x49, 0x10, 0x24, 0x98, 0xea, 0x6d, 0xf0, 0xc4}},
  {"1e0303", 1, 6,
   {0x7e, 0xd7, 0x54, 0xe3, 0x1c, 0xd0, 0x72, 0xda}},
  {"95e-089", 1, 7,
   {0x2d, 0xde, 0x3c, 0xbc, 0x99, 0x07, 0xfd, 0xc8}},
  {"85e0194", 1, 7,
   {0x68, 0x9d, 0x1c, 0x26, 0xdb, 0x7d, 0x0d, 0xae}},
  {"69e0267", 1, 7,
   {0x77, 0xc0, 0xb7, 0xcb, 0x60, 0xc9, 0x94, 0xda}},
  {"97e-019", 1, 7,
   {0x3c, 0x66, 0x5d, 0xde, 0x8e, 0x68, 0x8b, 0xa6}},
  {"37e0046", 1, 7,
   {0x49, 0xd0, 0x33, 0xd7, 0xec, 0xa0, 0xad, 0xef}},
  {"74e0046", 1, 7,
   {0x49, 0xe0, 0x33, 0xd7, 0xec, 0xa0, 0xad, 0xef}},
  {"61e-099", 1, 7,
   {0x2b, 0xc0, 0xad, 0x83, 0x6f, 0x26, 0x9a, 0x17}},
  {"53e-208", 1, 7,
   {0x15, 0x1b, 0x39, 0xae, 0x19, 0x09, 0xc3, 0x1b}},
  {"93e-234", 1, 7,
   {0x0f, 0xc2, 0x7b, 0x2e, 0x4f, 0x21, 0x00, 0x75}},
  {"79e-095", 1, 7,
   {0x2c, 0x9a, 0x5d, 0xb8, 0x12, 0x94, 0x82, 0x81}},
  {"87e-274", 1, 7,
   {0x07, 0x72, 0xd3, 0x6c, 0xf4, 0x8e, 0x7a, 0xbd}},
  {"83e0025", 1, 7,
   {0x45, 0x85, 0x74, 0x7a, 0xb1, 0x43, 0xe3, 0x53}},
  {"17e-036", 1, 7,
   {0x38, 0xb6, 0x98, 0xcc, 0xdc, 0x60, 0x01, 0x5a}},
  {"53e0033", 1, 7,
   {0x47, 0x24, 0x6a, 0x34, 0x18, 0x62, 0x9e, 0xf6}},
  {"51e-074", 1, 7,
   {0x30, 0xec, 0xd5, 0xbe, 0xe5, 0x77, 0x63, 0xe6}},
  {"63e-022", 1, 7,
   {0x3b, 0xbd, 0xc0, 0x3b, 0x8f, 0xd7, 0x01, 0x6a}},
  {"839e0143", 1, 8,
   {0x5e, 0x3a, 0xe0, 0x3f, 0x24, 0x57, 0x03, 0xe2}},
  {"749e-182", 1, 8,
   {0x1a, 0xbf, 0x14, 0x72, 0x77, 0x44, 0xc6, 0x3e}},
  {"999e-026", 1, 8,
   {0x3b, 0x28, 0x27, 0x82, 0xaf, 0xe1, 0x86, 0x9e}},
  {"345e0266", 1, 8,
   {0x77, 0xb0, 0xb7, 0xcb, 0x60, 0xc9, 0x94, 0xda}},
  {"914e-102", 1, 8,
   {0x2b, 0x5f, 0xfc, 0x81, 0xbc, 0x29, 0xf0, 0x2b}},
  {"829e0102", 1, 8,
   {0x55, 0xb7, 0x22, 0x1a, 0x79, 0xcd, 0xd1, 0xd9}},
  {"307e0090", 1, 8,
   {0x53, 0x22, 0xd6, 0xb1, 0x83, 0xfe, 0x4b, 0x55}},
  {"859e0182", 1, 8,
   {0x66, 0x54, 0x37, 0x4d, 0x8b, 0x87, 0xac, 0x63}},
  {"283e0085", 1, 8,
   {0x52, 0x16, 0xc3, 0x09, 0x02, 0x4b, 0xab, 0x4b}},
  {"589e0187", 1, 8,
   {0x67, 0x55, 0x26, 0xbe, 0x9c, 0x22, 0xeb, 0x17}},
  {"302e0176", 1, 8,
   {0x64, 0xfd, 0xcf, 0x7d, 0xf8, 0xf5, 0x73, 0xb7}},
  {"604e0176", 1, 8,
   {0x65, 0x0d, 0xcf, 0x7d, 0xf8, 0xf5, 0x73, 0xb7}},
  {"761e-244", 1, 8,
   {0x0d, 0xe0, 0x3c, 0xea, 0x35, 0x86, 0x45, 0x2e}},
  {"647e0230", 1, 8,
   {0x70, 0x44, 0xd6, 0x4d, 0x40, 0x79, 0x15, 0x0c}},
  {"755e0174", 1, 8,
   {0x64, 0xa7, 0xd9, 0x31, 0x93, 0xf7, 0x8f, 0xc6}},
  {"255e-075", 1, 8,
   {0x30, 0xdc, 0xd5, 0xbe, 0xe5, 0x77, 0x63, 0xe6}},
  {"3391e0055", 1, 9,
   {0x4c, 0x15, 0x9b, 0xd3, 0xad, 0x46, 0xe3, 0x46}},
  {"4147e-015", 1, 9,
   {0x3d, 0x92, 0x3d, 0x1b, 0x5e, 0xb1, 0xd7, 0x78}},
  {"3996e-026", 1, 9,
   {0x3b, 0x48, 0x27, 0x82, 0xaf, 0xe1, 0x86, 0x9e}},
  {"1998e-026", 1, 9,
   {0x3b, 0x38, 0x27, 0x82, 0xaf, 0xe1, 0x86, 0x9e}},
  {"3338e-296", 1, 9,
   {0x03, 0x35, 0x51, 0x9a, 0xc5, 0x14, 0x2a, 0xab}},
  {"1669e-296", 1, 9,
   {0x03, 0x25, 0x51, 0x9a, 0xc5, 0x14, 0x2a, 0xab}},
  {"8699e-276", 1, 9,
   {0x07, 0x72, 0xd2, 0xdf, 0x24, 0x6e, 0xcd, 0x2d}},
  {"5311e0243", 1, 9,
   {0x73, 0x28, 0x4e, 0x91, 0xf4, 0xaa, 0x0f, 0xdb}},
  {"7903e-096", 1, 9,
   {0x2c, 0xd0, 0x7c, 0x2d, 0x27, 0xa5, 0xb9, 0x89}},
  {"7611e-226", 1, 9,
   {0x11, 0xd1, 0x9b, 0x87, 0x44, 0x03, 0x34, 0x57}},
  {"3257e0058", 1, 9,
   {0x4c, 0xb4, 0x44, 0xb3, 0x4a, 0x6f, 0xb3, 0xeb}},
  {"6514e0058", 1, 9,
   {0x4c, 0xc4, 0x44, 0xb3, 0x4a, 0x6f, 0xb3, 0xeb}},
  {"3571e0263", 1, 9,
   {0x77, 0x46, 0x26, 0x44, 0xc6, 0x1d, 0x41, 0xaa}},
  {"7142e0263", 1, 9,
   {0x77, 0x56, 0x26, 0x44, 0xc6, 0x1d, 0x41, 0xaa}},
  {"5311e0242", 1, 9,
   {0x72, 0xf3, 0x72, 0x0e, 0x5d, 0x54, 0xd9, 0x7c}},
  {"1617e-063", 1, 9,
   {0x33, 0x84, 0xc9, 0x8f, 0xce, 0x16, 0x15, 0x2e}},
  {"51881e0037", 1, 10,
   {0x48, 0x97, 0xd2, 0x95, 0x0d, 0xc7, 0x6d, 0xa4}},
  {"31441e-118", 1, 10,
   {0x28, 0x5e, 0xf8, 0x90, 0xf5, 0xde, 0x4c, 0x86}},
  {"30179e0079", 1, 10,
   {0x51, 0x43, 0xe2, 0x72, 0xa7, 0x74, 0x78, 0xe8}},
  {"60358e0079", 1, 10,
   {0x51, 0x53, 0xe2, 0x72, 0xa7, 0x74, 0x78, 0xe8}},
  {"63876e-020", 1, 10,
   {0x3c, 0xc7, 0x03, 0x85, 0x68, 0x44, 0xbd, 0xbf}},
  {"31938e-020", 1, 10,
   {0x3c, 0xb7, 0x03, 0x85, 0x68, 0x44, 0xbd, 0xbf}},
  {"46073e-032", 1, 10,
   {0x3a, 0x42, 0x40, 0x5b, 0x77, 0x3f, 0xbd, 0xf3}},
  {"32941e0051", 1, 10,
   {0x4b, 0x75, 0x7e, 0xb8, 0xad, 0x52, 0xa5, 0xc9}},
  {"82081e0041", 1, 10,
   {0x49, 0x77, 0x01, 0x05, 0xdf, 0x3d, 0x47, 0xcb}},
  {"38701e-215", 1, 10,
   {0x14, 0x40, 0x49, 0x2a, 0x4a, 0x8a, 0x37, 0xfd}},
  {"62745e0047", 1, 10,
   {0x4a, 0xb0, 0xc5, 0x2f, 0xe6, 0xdc, 0x6a, 0x1b}},
  {"12549e0048", 1, 10,
   {0x4a, 0xc0, 0xc5, 0x2f, 0xe6, 0xdc, 0x6a, 0x1b}},
  {"64009e-183", 1, 10,
   {0x1a, 0xf0, 0x99, 0xb3, 0x93, 0xb8, 0x48, 0x32}},
  {"89275e0261", 1, 10,
   {0x77, 0x26, 0x26, 0x44, 0xc6, 0x1d, 0x41, 0xaa}},
  {"75859e0025", 1, 10,
   {0x46, 0x23, 0x26, 0x45, 0xe1, 0xba, 0x93, 0xf0}},
  {"57533e0287", 1, 10,
   {0x7c, 0x82, 0x72, 0xed, 0x23, 0x07, 0xf5, 0x6a}},
  {"584169e0229", 1, 11,
   {0x70, 0xad, 0x65, 0x70, 0x59, 0xdc, 0x79, 0xaa}},
  {"940189e-112", 1, 11,
   {0x29, 0xeb, 0x99, 0xd6, 0x24, 0x0c, 0x1a, 0x28}},
  {"416121e0197", 1, 11,
   {0x6a, 0x00, 0xfd, 0x07, 0xed, 0x29, 0x7f, 0x80}},
  {"832242e0197", 1, 11,
   {0x6a, 0x10, 0xfd, 0x07, 0xed, 0x29, 0x7f, 0x80}},
  {"584738e0076", 1, 11,
   {0x50, 0xe8, 0xa8, 0x5e, 0xb2, 0x77, 0xe6, 0x45}},
  {"933587e-140", 1, 11,
   {0x24, 0x1b, 0x24, 0x87, 0x28, 0xb9, 0xc1, 0x17}},
  {"252601e0121", 1, 11,
   {0x5a, 0x2d, 0xda, 0x59, 0x2e, 0x39, 0x8d, 0xd7}},
  {"358423e0274", 1, 11,
   {0x79, 0xf9, 0x46, 0x3b, 0x59, 0xb8, 0xf2, 0xbd}},
  {"892771e-213", 1, 11,
   {0x14, 0xf2, 0x58, 0x18, 0xc7, 0x29, 0x4f, 0x27}},
  {"410405e0040", 1, 11,
   {0x49, 0x67, 0x01, 0x05, 0xdf, 0x3d, 0x47, 0xcb}},
  {"928609e-261", 1, 11,
   {0x0a, 0xfb, 0xe2, 0xdd, 0x66, 0x20, 0x0b, 0xef}},
  {"302276e-254", 1, 11,
   {0x0c, 0x55, 0xa4, 0x62, 0xd9, 0x1c, 0x6a, 0xb3}},
  {"920657e-023", 1, 11,
   {0x3c, 0x65, 0x3a, 0x99, 0x85, 0xdb, 0xde, 0x6c}},
  {"609019e-025", 1, 11,
   {0x3b, 0xf1, 0xf9, 0x9e, 0x11, 0xea, 0x0a, 0x24}},
  {"252601e0120", 1, 11,
   {0x59, 0xf7, 0xe1, 0xe0, 0xf1, 0xc7, 0xa4, 0xac}},
  {"654839e-060", 1, 11,
   {0x34, 0xb0, 0x0e, 0x7d, 0xb3, 0xb3, 0xf2, 0x42}},
  {"8823691e0130", 1, 12,
   {0x5c, 0x5e, 0x59, 0x7c, 0x0b, 0x94, 0xb7, 0xae}},
  {"2920845e0228", 1, 12,
   {0x70, 0x9d, 0x65, 0x70, 0x59, 0xdc, 0x79, 0xaa}},
  {"9210917e0080", 1, 12,
   {0x51, 0xfd, 0xa2, 0x32, 0x34, 0x7e, 0x60, 0x32}},
  {"5800419e-303", 1, 12,
   {0x02, 0x6e, 0x58, 0xff, 0xa4, 0x8f, 0x4f, 0xce}},
  {"6119898e-243", 1, 12,
   {0x0e, 0xe3, 0xec, 0xf2, 0x2e, 0xa0, 0x78, 0x63}},
  {"3059949e-243", 1, 12,
   {0x0e, 0xd3, 0xec, 0xf2, 0x2e, 0xa0, 0x78, 0x63}},
  {"2572231e0223", 1, 12,
   {0x6f, 0x90, 0xf7, 0x3b, 0xe1, 0xdf, 0xf9, 0xad}},
  {"5444097e-021", 1, 12,
   {0x3c, 0xf8, 0x84, 0x9d, 0xd3, 0x3c, 0x95, 0xaf}},
  {"5783893e-127", 1, 12,
   {0x26, 0xf7, 0xe5, 0x90, 0x2c, 0xe0, 0xe1, 0x51}},
  {"3865421e-225", 1, 12,
   {0x12, 0x95, 0xd4, 0xfe, 0x53, 0xaf, 0xec, 0x65}},
  {"4590831e0156", 1, 12,
   {0x61, 0xb4, 0x68, 0x9b, 0x4a, 0x5f, 0xa2, 0x01}},
  {"9181662e0156", 1, 12,
   {0x61, 0xc4, 0x68, 0x9b, 0x4a, 0x5f, 0xa2, 0x01}},
  {"5906361e-027", 1, 12,
   {0x3b, 0xbb, 0xe4, 0x5a, 0x31, 0x2d, 0x08, 0xa0}},
  {"7315057e0235", 1, 12,
   {0x72, 0x25, 0xf0, 0xd4, 0x08, 0x36, 0x2a, 0x72}},
  {"9088115e0106", 1, 12,
   {0x57, 0x62, 0xe5, 0x1a, 0x84, 0xa3, 0xc6, 0xa0}},
  {"1817623e0107", 1, 12,
   {0x57, 0x72, 0xe5, 0x1a, 0x84, 0xa3, 0xc6, 0xa0}},
  {"44118455e0129", 1, 13,
   {0x5c, 0x4e, 0x59, 0x7c, 0x0b, 0x94, 0xb7, 0xae}},
  {"35282041e0293", 1, 13,
   {0x7e, 0x55, 0x12, 0xd5, 0x27, 0x3e, 0x62, 0xe8}},
  {"31279898e-291", 1, 13,
   {0x05, 0x12, 0x9b, 0x01, 0xb6, 0x88, 0x5d, 0x36}},
  {"15639949e-291", 1, 13,
   {0x05, 0x02, 0x9b, 0x01, 0xb6, 0x88, 0x5d, 0x36}},
  {"27966061e0145", 1, 13,
   {0x5f, 0x95, 0x5b, 0xcf, 0x72, 0xfd, 0x10, 0xf9}},
  {"55932122e0145", 1, 13,
   {0x5f, 0xa5, 0x5b, 0xcf, 0x72, 0xfd, 0x10, 0xf9}},
  {"70176353e-053", 1, 13,
   {0x36, 0x90, 0x06, 0x83, 0xa2, 0x1d, 0xe8, 0x55}},
  {"40277543e-032", 1, 13,
   {0x3a, 0xdf, 0x29, 0xca, 0x0f, 0xf8, 0x93, 0xb1}},
  {"50609263e0157", 1, 13,
   {0x62, 0x21, 0x93, 0xaf, 0xf1, 0xf1, 0xc8, 0xe3}},
  {"66094077e0077", 1, 13,
   {0x51, 0x8b, 0x37, 0xc4, 0xb7, 0x92, 0x83, 0x17}},
  {"84863171e0114", 1, 13,
   {0x59, 0x40, 0x6e, 0x98, 0xf5, 0xec, 0x8f, 0x37}},
  {"89396333e0264", 1, 13,
   {0x78, 0x65, 0x26, 0xf0, 0x61, 0xca, 0x90, 0x53}},
  {"87575437e-309", 1, 13,
   {0x01, 0x6e, 0x07, 0x32, 0x06, 0x02, 0x05, 0x6c}},
  {"78693511e-044", 1, 13,
   {0x38, 0x70, 0xbc, 0x7b, 0x76, 0x03, 0xa2, 0xca}},
  {"90285923e-206", 1, 13,
   {0x16, 0xd1, 0x47, 0x00, 0x83, 0xf8, 0x9d, 0x48}},
  {"30155207e-030", 1, 13,
   {0x3b, 0x42, 0x3a, 0x4a, 0xd2, 0x07, 0x48, 0xa2}},
  {"245540327e0121", 1, 14,
   {0x5a, 0xcc, 0x56, 0x9e, 0x96, 0x8e, 0x09, 0x44}},
  {"263125459e0287", 1, 14,
   {0x7d, 0x44, 0x99, 0x7a, 0x29, 0x8b, 0x2f, 0x2e}},
  {"566446538e-257", 1, 14,
   {0x0c, 0x64, 0x47, 0x2b, 0xa9, 0x55, 0x0e, 0x86}},
  {"283223269e-257", 1, 14,
   {0x0c, 0x54, 0x47, 0x2b, 0xa9, 0x55, 0x0e, 0x86}},
  {"245540327e0122", 1, 14,
   {0x5b, 0x01, 0xb6, 0x23, 0x1e, 0x18, 0xc5, 0xcb}},
  {"491080654e0122", 1, 14,
   {0x5b, 0x11, 0xb6, 0x23, 0x1e, 0x18, 0xc5, 0xcb}},
  {"971212611e-126", 1, 14,
   {0x27, 0xa3, 0x97, 0xd3, 0xc9, 0x74, 0x5d, 0x2f}},
  {"229058583e0052", 1, 14,
   {0x4c, 0x76, 0xce, 0x94, 0xfe, 0xbd, 0xc7, 0xa5}},
  {"325270231e0039", 1, 14,
   {0x49, 0xcc, 0x7c, 0xcf, 0x90, 0xc9, 0xf8, 0xab}},
  {"989648089e-035", 1, 14,
   {0x3a, 0x88, 0x80, 0xa3, 0xd5, 0x15, 0xe8, 0x49}},
  {"653777767e0273", 1, 14,
   {0x7a, 0x72, 0x02, 0x23, 0xf2, 0xb3, 0xa8, 0x81}},
  {"923091487e0209", 1, 14,
   {0x6d, 0x30, 0xbc, 0x60, 0xe6, 0x89, 0x67, 0x17}},
  {"526250918e0288", 1, 14,
   {0x7d, 0x89, 0xbf, 0xd8, 0xb3, 0xed, 0xfa, 0xfa}},
  {"350301748e-309", 1, 14,
   {0x01, 0x8e, 0x07, 0x32, 0x06, 0x02, 0x05, 0x6c}},
  {"741111169e-203", 1, 14,
   {0x17, 0xa1, 0x4f, 0xe7, 0xda, 0xf8, 0xf3, 0xae}},
  {"667284113e-240", 1, 14,
   {0x0f, 0xf0, 0x93, 0x55, 0xf8, 0x05, 0x0c, 0x02}},
  {"1227701635e0120", 1, 15,
   {0x5a, 0xbc, 0x56, 0x9e, 0x96, 0x8e, 0x09, 0x44}},
  {"9981396317e-182", 1, 15,
   {0x1c, 0x38, 0xaf, 0xe1, 0x0a, 0x2a, 0x66, 0xaa}},
  {"5232604057e-298", 1, 15,
   {0x04, 0x14, 0x65, 0xb8, 0x96, 0xc2, 0x45, 0x20}},
  {"5572170023e-088", 1, 15,
   {0x2f, 0xb0, 0x84, 0x78, 0x22, 0xf7, 0x65, 0xb2}},
  {"1964322616e0122", 1, 15,
   {0x5b, 0x31, 0xb6, 0x23, 0x1e, 0x18, 0xc5, 0xcb}},
  {"3928645232e0122", 1, 15,
   {0x5b, 0x41, 0xb6, 0x23, 0x1e, 0x18, 0xc5, 0xcb}},
  {"8715380633e-058", 1, 15,
   {0x35, 0xf4, 0x61, 0x4c, 0x32, 0x19, 0x89, 0x1f}},
  {"4856063055e-127", 1, 15,
   {0x27, 0x93, 0x97, 0xd3, 0xc9, 0x74, 0x5d, 0x2f}},
  {"8336960483e-153", 1, 15,
   {0x22, 0x3a, 0x06, 0xa1, 0x02, 0x4b, 0x95, 0xe1}},
  {"1007046393e-155", 1, 15,
   {0x21, 0xa0, 0x18, 0x91, 0xfc, 0x47, 0x17, 0xfd}},
  {"5378822089e-176", 1, 15,
   {0x1d, 0x69, 0x5f, 0xd4, 0xc8, 0x8d, 0x4b, 0x1b}},
  {"5981342308e-190", 1, 15,
   {0x1a, 0x83, 0xdb, 0x11, 0xac, 0x60, 0x81, 0x07}},
  {"7214782613e-086", 1, 15,
   {0x30, 0x20, 0xb5, 0x52, 0xd2, 0xed, 0xcd, 0xea}},
  {"5458466829e0142", 1, 15,
   {0x5f, 0x70, 0xac, 0xde, 0x6a, 0x98, 0xeb, 0x4c}},
  {"9078555839e-109", 1, 15,
   {0x2b, 0x5f, 0xc5, 0x75, 0x86, 0x73, 0x14, 0xee}},
  {"6418488827e0079", 1, 15,
   {0x52, 0x60, 0x21, 0xf1, 0x4e, 0xd7, 0xb3, 0xfa}},
  {"65325840981e0069", 1, 16,
   {0x50, 0x81, 0xa1, 0x51, 0xdd, 0xbd, 0x3c, 0x4a}},
  {"49573485983e0089", 1, 16,
   {0x54, 0xa2, 0x21, 0xbd, 0x87, 0x1d, 0x2c, 0xf4}},
  {"46275205733e0074", 1, 16,
   {0x51, 0x83, 0x0e, 0x6c, 0x7d, 0x4e, 0x34, 0x80}},
  {"92550411466e0074", 1, 16,
   {0x51, 0x93, 0x0e, 0x6c, 0x7d, 0x4e, 0x34, 0x80}},
  {"41129842097e-202", 1, 16,
   {0x18, 0x32, 0xc3, 0xe7, 0x2d, 0x17, 0x96, 0x07}},
  {"93227267727e-049", 1, 16,
   {0x38, 0x09, 0x60, 0xfe, 0x08, 0xd5, 0x84, 0x7f}},
  {"41297294357e0185", 1, 16,
   {0x68, 0x8c, 0x49, 0x43, 0x7f, 0xcc, 0xfa, 0xdb}},
  {"41534892987e-067", 1, 16,
   {0x34, 0x3a, 0x12, 0x66, 0x64, 0x77, 0x88, 0x6d}},
  {"42333842451e0201", 1, 16,
   {0x6b, 0xe0, 0x18, 0x9a, 0x26, 0xdf, 0x57, 0x5f}},
  {"78564021519e-227", 1, 16,
   {0x13, 0x11, 0x55, 0x51, 0x5f, 0xd3, 0x72, 0x65}},
  {"53587107423e-061", 1, 16,
   {0x35, 0x80, 0x0a, 0x19, 0xa3, 0xff, 0xd9, 0x81}},
  {"53827010643e-200", 1, 16,
   {0x18, 0xa3, 0x2f, 0xa6, 0x9a, 0x69, 0xbd, 0x6d}},
  {"83356057653e0193", 1, 16,
   {0x6a, 0x45, 0x44, 0xe6, 0xda, 0xee, 0x2a, 0x18}},
  {"45256834646e-118", 1, 16,
   {0x29, 0xa5, 0x41, 0xec, 0xdf, 0xd4, 0x86, 0x94}},
  {"45392779195e-110", 1, 16,
   {0x2b, 0x4f, 0xc5, 0x75, 0x86, 0x73, 0x14, 0xee}},
  {"23934638219e0291", 1, 16,
   {0x7e, 0x81, 0xde, 0xaf, 0x40, 0xea, 0xd9, 0xa0}},
  {"995779191233e0113", 1, 17,
   {0x59, 0xe2, 0xd4, 0x4e, 0xdc, 0xc5, 0x13, 0x04}},
  {"997422852243e-265", 1, 17,
   {0x0b, 0x67, 0x66, 0x88, 0xfa, 0xee, 0x99, 0xbc}},
  {"653532977297e-123", 1, 17,
   {0x28, 0xd9, 0x25, 0xa0, 0xaa, 0xbc, 0xdc, 0x68}},
  {"938885684947e0147", 1, 17,
   {0x60, 0xf1, 0x18, 0x94, 0xb2, 0x02, 0xe9, 0xf4}},
  {"619534293513e0124", 1, 17,
   {0x5c, 0x21, 0x0c, 0x20, 0x30, 0x3f, 0xe0, 0xf1}},
  {"539879452414e-042", 1, 17,
   {0x39, 0xa5, 0xe6, 0x6d, 0xc3, 0xd6, 0xbd, 0xb5}},
  {"742522891517e0259", 1, 17,
   {0x78, 0x2c, 0x1c, 0x35, 0x2f, 0xc3, 0xc3, 0x09}},
  {"254901016865e-022", 1, 17,
   {0x3d, 0xbc, 0x06, 0xd3, 0x66, 0x39, 0x44, 0x41}},
  {"685763015669e0280", 1, 17,
   {0x7c, 0x85, 0xfd, 0x7a, 0xa4, 0x4d, 0x94, 0x77}},
  {"384865004907e-285", 1, 17,
   {0x07, 0x2a, 0xa6, 0x5b, 0x58, 0x63, 0x9e, 0x69}},
  {"286556458711e0081", 1, 17,
   {0x53, 0x21, 0x95, 0x8b, 0x36, 0xc5, 0x10, 0x2b}},
  {"573112917422e0081", 1, 17,
   {0x53, 0x31, 0x95, 0x8b, 0x36, 0xc5, 0x10, 0x2b}},
  {"769525178383e-150", 1, 17,
   {0x23, 0x42, 0x53, 0xec, 0x0e, 0x16, 0x14, 0x20}},
  {"416780288265e0192", 1, 17,
   {0x6a, 0x35, 0x44, 0xe6, 0xda, 0xee, 0x2a, 0x18}},
  {"226963895975e-111", 1, 17,
   {0x2b, 0x3f, 0xc5, 0x75, 0x86, 0x73, 0x14, 0xee}},
  {"665592809339e0063", 1, 17,
   {0x4f, 0x77, 0x8b, 0x65, 0x16, 0xc2, 0xb4, 0x78}},
  {"3891901811465e0217", 1, 18,
   {0x6f, 0x99, 0xab, 0x82, 0x61, 0x99, 0x02, 0x92}},
  {"4764593340755e0069", 1, 18,
   {0x50, 0xe4, 0x17, 0x7a, 0x99, 0x15, 0xfb, 0xf8}},
  {"6336156586177e0269", 1, 18,
   {0x7a, 0x71, 0x73, 0xf7, 0x6c, 0x63, 0xb7, 0x92}},
  {"8233559360849e0095", 1, 18,
   {0x56, 0x56, 0x6f, 0xee, 0x05, 0x64, 0x9a, 0x7a}},
  {"3662265515198e-107", 1, 18,
   {0x2c, 0x53, 0x8e, 0x6e, 0xdd, 0x48, 0xf2, 0xa3}},
  {"1831132757599e-107", 1, 18,
   {0x2c, 0x43, 0x8e, 0x6e, 0xdd, 0x48, 0xf2, 0xa3}},
  {"7812878489261e-179", 1, 18,
   {0x1d, 0x72, 0x6d, 0xae, 0x7b, 0xbe, 0xda, 0x75}},
  {"6363857920591e0145", 1, 18,
   {0x60, 0xb2, 0x8a, 0x61, 0xcf, 0x94, 0x83, 0xb7}},
  {"8811915538555e0082", 1, 18,
   {0x53, 0xa5, 0x1f, 0x50, 0x8b, 0x28, 0x7a, 0xe7}},
  {"9997878507563e-195", 1, 18,
   {0x1a, 0x25, 0x3d, 0xb2, 0xfe, 0xa1, 0xea, 0x31}},
  {"9224786422069e-291", 1, 18,
   {0x06, 0x34, 0xee, 0x5d, 0x56, 0xb3, 0x29, 0x57}},
  {"6284426329974e-294", 1, 18,
   {0x05, 0x8d, 0x34, 0x09, 0xdf, 0xbc, 0xa2, 0x6f}},
  {"9199302046091e-062", 1, 18,
   {0x35, 0xc1, 0x35, 0x97, 0x26, 0x30, 0x77, 0x4c}},
  {"6070482281213e-122", 1, 18,
   {0x29, 0x42, 0x3f, 0xa9, 0xe6, 0xfc, 0xf4, 0x7e}},
  {"2780161250963e-301", 1, 18,
   {0x04, 0x05, 0xac, 0xc2, 0x05, 0x30, 0x64, 0xc2}},
  {"8233559360849e0094", 1, 18,
   {0x56, 0x21, 0xf3, 0x24, 0xd1, 0x1d, 0x48, 0x62}},
  {"72027097041701e0206", 1, 19,
   {0x6d, 0x94, 0x67, 0x78, 0x12, 0xd3, 0xa6, 0x06}},
  {"97297545286625e0215", 1, 19,
   {0x6f, 0x79, 0xab, 0x82, 0x61, 0x99, 0x02, 0x92}},
  {"99021992302453e-025", 1, 19,
   {0x3d, 0xa5, 0xc6, 0x71, 0x4d, 0xef, 0x37, 0x4c}},
  {"54104687080198e-022", 1, 19,
   {0x3e, 0x37, 0x3c, 0xdf, 0x8d, 0xb7, 0xa7, 0xbc}},
  {"33519685743233e0089", 1, 19,
   {0x55, 0x37, 0xf2, 0x03, 0x33, 0x9c, 0x96, 0x29}},
  {"67039371486466e0089", 1, 19,
   {0x55, 0x47, 0xf2, 0x03, 0x33, 0x9c, 0x96, 0x29}},
  {"39064392446305e-180", 1, 19,
   {0x1d, 0x62, 0x6d, 0xae, 0x7b, 0xbe, 0xda, 0x75}},
  {"17796979903653e0261", 1, 19,
   {0x78, 0xe0, 0x72, 0xf3, 0x81, 0x9c, 0x13, 0x21}},
  {"28921916763211e0038", 1, 19,
   {0x4a, 0x9e, 0xeb, 0xab, 0xe0, 0x95, 0x7a, 0xf3}},
  {"87605699161665e0155", 1, 19,
   {0x63, 0x02, 0x92, 0x0f, 0x96, 0xe7, 0xf9, 0xef}},
  {"41921560615349e-067", 1, 19,
   {0x34, 0xd9, 0xb2, 0xa5, 0xc4, 0x04, 0x1e, 0x4b}},
  {"80527976643809e0061", 1, 19,
   {0x4f, 0x7c, 0x7c, 0x5a, 0xea, 0x08, 0x0a, 0x49}},
  {"72335858886654e-159", 1, 19,
   {0x21, 0xcc, 0xe7, 0x7c, 0x2b, 0x33, 0x28, 0xfc}},
  {"52656615219377e0102", 1, 19,
   {0x57, 0xf5, 0x61, 0xde, 0xf4, 0xa9, 0xee, 0x32}},
  {"15400733123779e-072", 1, 19,
   {0x33, 0xb8, 0xbf, 0x7e, 0x7f, 0xa6, 0xf0, 0x2a}},
  {"77003665618895e-073", 1, 19,
   {0x33, 0xa8, 0xbf, 0x7e, 0x7f, 0xa6, 0xf0, 0x2a}},
  {"475603213226859e-042", 1, 20,
   {0x3a, 0x42, 0xd7, 0x30, 0x88, 0xf4, 0x05, 0x0a}},
  {"972708181182949e0116", 1, 20,
   {0x5b, 0x21, 0x8a, 0x7f, 0x36, 0x17, 0x23, 0x32}},
  {"246411729980464e-071", 1, 20,
   {0x34, 0x2e, 0xef, 0x5e, 0x1f, 0x90, 0xac, 0x34}},
  {"123205864990232e-071", 1, 20,
   {0x34, 0x1e, 0xef, 0x5e, 0x1f, 0x90, 0xac, 0x34}},
  {"609610927149051e-255", 1, 20,
   {0x0e, 0x10, 0x42, 0x73, 0xb1, 0x89, 0x18, 0xb1}},
  {"475603213226859e-041", 1, 20,
   {0x3a, 0x77, 0x8c, 0xfc, 0xab, 0x31, 0x06, 0x4d}},
  {"672574798934795e0065", 1, 20,
   {0x50, 0x82, 0x26, 0xc6, 0x84, 0xc8, 0x72, 0x61}},
  {"134514959786959e0066", 1, 20,
   {0x50, 0x92, 0x26, 0xc6, 0x84, 0xc8, 0x72, 0x61}},
  {"294897574603217e-151", 1, 20,
   {0x23, 0x95, 0xf2, 0xdf, 0x5e, 0x67, 0x5a, 0x0f}},
  {"723047919080275e0036", 1, 20,
   {0x4a, 0x7e, 0xeb, 0xab, 0xe0, 0x95, 0x7a, 0xf3}},
  {"660191429952702e-088", 1, 20,
   {0x30, 0xbd, 0xdc, 0x7e, 0x97, 0x5c, 0x50, 0x45}},
  {"330095714976351e-088", 1, 20,
   {0x30, 0xad, 0xdc, 0x7e, 0x97, 0x5c, 0x50, 0x45}},
  {"578686871093232e-159", 1, 20,
   {0x21, 0xfc, 0xe7, 0x7c, 0x2b, 0x33, 0x28, 0xfc}},
  {"144671717773308e-159", 1, 20,
   {0x21, 0xdc, 0xe7, 0x7c, 0x2b, 0x33, 0x28, 0xfc}},
  {"385018328094475e-074", 1, 20,
   {0x33, 0x98, 0xbf, 0x7e, 0x7f, 0xa6, 0xf0, 0x2a}},
  {"330095714976351e-089", 1, 20,
   {0x30, 0x77, 0xe3, 0x98, 0x79, 0x16, 0xa6, 0x9e}},
  {"2215901545757777e-212", 1, 21,
   {0x17, 0x1a, 0x80, 0xa6, 0xe5, 0x66, 0x42, 0x8c}},
  {"1702061899637397e-276", 1, 21,
   {0x09, 0xca, 0xcc, 0x46, 0x74, 0x9d, 0xcc, 0xfe}},
  {"1864950924021923e0213", 1, 21,
   {0x6f, 0x53, 0xae, 0x60, 0x75, 0x3a, 0xf6, 0xca}},
  {"3729901848043846e0213", 1, 21,
   {0x6f, 0x63, 0xae, 0x60, 0x75, 0x3a, 0xf6, 0xca}},
  {"7487252720986826e-165", 1, 21,
   {0x20, 0xf8, 0x82, 0x3a, 0x57, 0xad, 0xbe, 0xf9}},
  {"3743626360493413e-165", 1, 21,
   {0x20, 0xe8, 0x82, 0x3a, 0x57, 0xad, 0xbe, 0xf9}},
  {"4988915232824583e0119", 1, 21,
   {0x5b, 0xe5, 0xf6, 0xde, 0x9d, 0x5d, 0x6b, 0x5b}},
  {"3771476185376383e0277", 1, 21,
   {0x7c, 0xae, 0x3c, 0x14, 0xd6, 0x91, 0x6c, 0xe9}},
  {"6182410494241627e-119", 1, 21,
   {0x2a, 0x81, 0xb9, 0x64, 0x58, 0x44, 0x5d, 0x07}},
  {"2572981889477453e0142", 1, 21,
   {0x60, 0x9d, 0xfc, 0x11, 0xfb, 0xf4, 0x60, 0x87}},
  {"7793560217139653e0051", 1, 21,
   {0x4d, 0xd2, 0x80, 0x46, 0x1b, 0x85, 0x6e, 0xc5}},
  {"9163942927285259e-202", 1, 21,
   {0x19, 0x4f, 0xe6, 0x01, 0x45, 0x7d, 0xce, 0x4d}},
  {"6353227084707473e0155", 1, 21,
   {0x63, 0x65, 0x0a, 0xff, 0x65, 0x3f, 0xfe, 0x8a}},
  {"4431803091515554e-211", 1, 21,
   {0x17, 0x60, 0x90, 0x68, 0x4f, 0x5f, 0xe9, 0x98}},
  {"9324754620109615e0211", 1, 21,
   {0x6f, 0x0f, 0x7d, 0x67, 0x21, 0xf7, 0xf1, 0x44}},
  {"8870461176410409e0263", 1, 21,
   {0x79, 0xd9, 0x05, 0x29, 0xa3, 0x7b, 0x7e, 0x22}},
  {"90372559027740405e0143", 1, 22,
   {0x61, 0x24, 0x91, 0xda, 0xad, 0x0b, 0xa2, 0x80}},
  {"18074511805548081e0146", 1, 22,
   {0x61, 0xa0, 0x11, 0xf2, 0xd7, 0x31, 0x16, 0xf4}},
  {"54897030182071313e0029", 1, 22,
   {0x49, 0x6e, 0xc5, 0x56, 0x66, 0xd8, 0xf9, 0xec}},
  {"76232626624829156e-032", 1, 22,
   {0x3c, 0xcb, 0x77, 0x38, 0x01, 0x1e, 0x75, 0xfe}},
  {"59898021767894608e-165", 1, 22,
   {0x21, 0x28, 0x82, 0x3a, 0x57, 0xad, 0xbe, 0xf9}},
  {"29949010883947304e-165", 1, 22,
   {0x21, 0x18, 0x82, 0x3a, 0x57, 0xad, 0xbe, 0xf9}},
  {"26153245263757307e0049", 1, 22,
   {0x4d, 0x83, 0xde, 0x00, 0x5b, 0xd6, 0x20, 0xdf}},
  {"27176258005319167e-261", 1, 22,
   {0x0d, 0x27, 0xc0, 0x74, 0x7b, 0xd7, 0x6f, 0xa1}},
  {"18074511805548081e0147", 1, 22,
   {0x61, 0xd4, 0x16, 0x6f, 0x8c, 0xfd, 0x5c, 0xb1}},
  {"24691002732654881e-115", 1, 22,
   {0x2b, 0x75, 0x9a, 0x27, 0x83, 0xce, 0x70, 0xab}},
  {"58483921078398283e0057", 1, 22,
   {0x4f, 0x40, 0x8c, 0xe4, 0x99, 0x51, 0x9c, 0xe3}},
  {"64409240769861689e-159", 1, 22,
   {0x22, 0x69, 0x22, 0x38, 0xf7, 0x98, 0x77, 0x79}},
  {"94080055902682397e-242", 1, 22,
   {0x11, 0x36, 0x49, 0x81, 0xe3, 0x9e, 0x66, 0xca}},
  {"31766135423537365e0154", 1, 22,
   {0x63, 0x55, 0x0a, 0xff, 0x65, 0x3f, 0xfe, 0x8a}},
  {"68985865317742005e0164", 1, 22,
   {0x65, 0x7a, 0x99, 0x9d, 0xde, 0xc7, 0x2a, 0xca}},
  {"13797173063548401e0165", 1, 22,
   {0x65, 0x8a, 0x99, 0x9d, 0xde, 0xc7, 0x2a, 0xca}},
  {"902042358290366539e-281", 1, 23,
   {0x09, 0x52, 0x2d, 0xc0, 0x1c, 0xa1, 0xcb, 0x8c}},
  {"238296178309629163e0272", 1, 23,
   {0x7c, 0x03, 0x8f, 0xd9, 0x3f, 0x1f, 0x53, 0x42}},
  {"783308178698887621e0226", 1, 23,
   {0x72, 0x92, 0x5a, 0xe6, 0x2c, 0xb3, 0x46, 0xd8}},
  {"439176241456570504e0029", 1, 23,
   {0x49, 0x9e, 0xc5, 0x56, 0x66, 0xd8, 0xf9, 0xec}},
  {"899810892172646163e0283", 1, 23,
   {0x7e, 0x6a, 0xdf, 0x51, 0xfa, 0x05, 0x5e, 0x03}},
  {"926145344610700019e-225", 1, 23,
   {0x14, 0xf3, 0x07, 0xa6, 0x7f, 0x1f, 0x69, 0xff}},
  {"653831131593932675e0047", 1, 23,
   {0x4d, 0x63, 0xde, 0x00, 0x5b, 0xd6, 0x20, 0xdf}},
  {"130766226318786535e0048", 1, 23,
   {0x4d, 0x73, 0xde, 0x00, 0x5b, 0xd6, 0x20, 0xdf}},
  {"557035730189854663e-294", 1, 23,
   {0x06, 0x93, 0xbf, 0xac, 0x6b, 0xc4, 0x76, 0x7b}},
  {"902042358290366539e-280", 1, 23,
   {0x09, 0x86, 0xb9, 0x30, 0x23, 0xca, 0x3e, 0x6f}},
  {"272104041512242479e0200", 1, 23,
   {0x6d, 0x13, 0xbb, 0xb4, 0xbf, 0x05, 0xf0, 0x87}},
  {"544208083024484958e0200", 1, 23,
   {0x6d, 0x23, 0xbb, 0xb4, 0xbf, 0x05, 0xf0, 0x87}},
  {"680429695511221511e0192", 1, 23,
   {0x6b, 0x80, 0x8e, 0xbc, 0x11, 0x6f, 0x8a, 0x20}},
  {"308975121073410857e0236", 1, 23,
   {0x74, 0x90, 0xdb, 0x75, 0xcc, 0x00, 0x10, 0x72}},
  {"792644927852378159e0078", 1, 23,
   {0x53, 0xd7, 0xbf, 0xf3, 0x36, 0xd8, 0xff, 0x06}},
  {"783308178698887621e0223", 1, 23,
   {0x71, 0xf2, 0xcb, 0xac, 0x35, 0xf7, 0x11, 0x40}},
  {"8396094300569779681e-252", 1, 24,
   {0x0f, 0x8a, 0xb2, 0x23, 0xef, 0xce, 0xe3, 0x5a}},
  {"3507665085003296281e-074", 1, 24,
   {0x34, 0x6b, 0x85, 0xc0, 0x26, 0xa2, 0x64, 0xe4}},
  {"7322325862592278999e0074", 1, 24,
   {0x53, 0x36, 0x77, 0x5b, 0x6c, 0xaa, 0x5a, 0xe0}},
  {"6014546754280072926e0209", 1, 24,
   {0x6f, 0x39, 0x63, 0x97, 0xb0, 0x67, 0x32, 0xa4}},
  {"7120190517612959703e0120", 1, 24,
   {0x5c, 0xc3, 0x22, 0x0d, 0xcd, 0x58, 0x99, 0xfd}},
  {"3507665085003296281e-073", 1, 24,
   {0x34, 0xa1, 0x33, 0x98, 0x18, 0x25, 0x7f, 0x0f}},
  {"4345544743100783551e-218", 1, 24,
   {0x16, 0x8a, 0x9c, 0x42, 0xe5, 0xb6, 0xd8, 0x9f}},
  {"9778613303868468131e-090", 1, 24,
   {0x31, 0x31, 0x46, 0xfe, 0x10, 0x75, 0xe1, 0xef}},
  {"7539204280836061195e-082", 1, 24,
   {0x32, 0xd3, 0xd9, 0x69, 0xe3, 0xdb, 0xe7, 0x23}},
  {"7862637540082247119e-202", 1, 24,
   {0x19, 0xea, 0xba, 0x32, 0x62, 0xee, 0x70, 0x7b}},
  {"2176832332097939832e0200", 1, 24,
   {0x6d, 0x43, 0xbb, 0xb4, 0xbf, 0x05, 0xf0, 0x87}},
  {"8643988913946659879e0115", 1, 24,
   {0x5b, 0xbe, 0x71, 0xec, 0x1e, 0xd0, 0xa4, 0xf9}},
  {"5529436763613147623e0138", 1, 24,
   {0x60, 0x79, 0xc6, 0x77, 0xbe, 0x6f, 0x23, 0x6e}},
  {"6764958008109694533e-173", 1, 24,
   {0x1f, 0xed, 0x06, 0x69, 0x2e, 0x6f, 0x5e, 0xf6}},
  {"6802601037806061975e0197", 1, 24,
   {0x6c, 0xbf, 0x92, 0xba, 0xcb, 0x3c, 0xb4, 0x0c}},
  {"1360520207561212395e0198", 1, 24,
   {0x6c, 0xcf, 0x92, 0xba, 0xcb, 0x3c, 0xb4, 0x0c}},
  {"62259110684423957791e0047", 1, 25,
   {0x4d, 0xcd, 0x8f, 0x2c, 0xfc, 0x20, 0xd6, 0xe8}},
  {"88800290202542652011e-226", 1, 25,
   {0x15, 0x26, 0xce, 0xc5, 0x1a, 0x43, 0xf4, 0x1a}},
  {"41010852717673354694e-221", 1, 25,
   {0x16, 0x20, 0x12, 0x95, 0x4b, 0x6a, 0xab, 0xba}},
  {"20505426358836677347e-221", 1, 25,
   {0x16, 0x10, 0x12, 0x95, 0x4b, 0x6a, 0xab, 0xba}},
  {"66102447903809911604e0055", 1, 25,
   {0x4f, 0x77, 0x62, 0x06, 0x8a, 0x24, 0xfd, 0x55}},
  {"35600952588064798515e0119", 1, 25,
   {0x5c, 0xb3, 0x22, 0x0d, 0xcd, 0x58, 0x99, 0xfd}},
  {"14371240869903838702e0205", 1, 25,
   {0x6e, 0x78, 0xd9, 0x2d, 0x2b, 0xcc, 0x7a, 0x81}},
  {"57500690832492901689e0043", 1, 25,
   {0x4c, 0xf6, 0x5d, 0x3e, 0x2a, 0xcd, 0x61, 0x6b}},
  {"23432630639573022093e-107", 1, 25,
   {0x2d, 0xbd, 0xd5, 0x4c, 0x40, 0xa2, 0xf2, 0x5f}},
  {"62259110684423957791e0048", 1, 25,
   {0x4e, 0x02, 0x79, 0x7c, 0x1d, 0x94, 0x86, 0x51}},
  {"35620497849450218807e-306", 1, 25,
   {0x04, 0x75, 0xb2, 0x20, 0x82, 0x52, 0x94, 0x25}},
  {"69658634627134074624e0200", 1, 25,
   {0x6d, 0x93, 0xbb, 0xb4, 0xbf, 0x05, 0xf0, 0x87}},
  {"99440755792436956989e-062", 1, 25,
   {0x37, 0x36, 0x2d, 0x10, 0x46, 0x2a, 0x26, 0xf4}},
  {"55277197169490210673e0081", 1, 25,
   {0x54, 0xd9, 0x45, 0xbf, 0xa9, 0x11, 0xe3, 0x2a}},
  {"36992084760177624177e-318", 1, 25,
   {0x01, 0xf8, 0xc5, 0xf9, 0x55, 0x1c, 0x2f, 0x9a}},
  {"30888265282878466443e-111", 1, 25,
   {0x2c, 0xf0, 0x1b, 0x8e, 0xf2, 0x82, 0x51, 0xfc}},
  {"2.47032822920623272088284396434110686182529901307162382212792841250337753"
   "6351043759326499181808179961898982823477228588654633283551779698981993873"
   "9800539093906315035659515570226392290858392449105184435931802849936536152"
   "5003193704576782492193656236698636584807570015857692699037063119282795585"
   "5133292783433840935197801553124659726357957462276646527282722005637400648"
   "5499977096599470454020828166226237857393450736339007967761930577506740176"
   "3246736009689513405355374585166611342237666786041621596804619144672918403"
   "0053005753084904876539171138659164623952491262365388187963623937328042389"
   "1018672348497668235089863388587925628302755995657524455507255189313690836"
   "2547791869486679949683240497058210285131854513962138377228261454376934125"
   "32098591327667236328125e-324", 1, 758,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {"2.47032822920623272e-324", 1, 24,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {0, 0, 0,
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
};

const char *
ewtst::TestString::test06(bool return_name)
{
  if (return_name) {
    return "scan double";
  }
  for (int i = 0; TestData06[i].inp != 0; i += 1) {
    int r;
    double v;
    const char *se;
    const char *s = TestData06[i].inp;
    v = 9871.2;
    union {
      double v;
      unsigned char b[8];
    } u;
    for (int j = 0; j < 8; j += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
      u.b[j] = TestData06[i].b[7 - j];
#else
      u.b[j] = TestData06[i].b[j];
#endif
    }
    r = ew::String::scan_finite_double(&v, &se, s);
    if (r != (TestData06[i].r == 1) || se - s != TestData06[i].l ||
     std::memcmp(&v, &u.v, 8) != 0) {
      report_error("%d bad scan of \"%s\": r=%d v=%.17g(%.17g) l=%d", i, s, r,
       v, u.v, se - s);
    }
  }
  const ew::Debug &dbg = ew::Debug::instance();
  double *ff1 = new double[1000000];
  double *ff2 = new double[1000000];
  char *buf = new char[15000000];
  for (int i = 0; i < 1000000; i += 1) {
    sprintf(buf + 15 * i, "%.5f", i * 0.5e-4 + 3.21456);
  }
  const char *en;
  char *enc;
  double t0, t1, t2;
  if (dbg.get_active("timing")) {
    t0 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ff1[i] = strtod(buf + 15 * i, &enc);
  }
  if (dbg.get_active("timing")) {
    t1 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ew::String::scan_finite_double(ff2 + i, &en, buf + 15 * i);
  }
  if (dbg.get_active("timing")) {
    t2 = ew::Time::elapsed();
    dbg.dprintf("%s %14s stdio %.6f ew::String %.6f", "timing", "scan-double",
     t1 - t0, t2 - t1);
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (std::memcmp(ff1 + i, ff2 + i, 8) != 0) {
      report_error("strtof-scan discrepancy for %s: \"%.17g\" \"%.17g\"",
       buf[i * 15], ff1[i], ff2[i]);
    }
  }
  delete[] ff1;
  delete[] ff2;
  delete[] buf;
  return 0;
}

static struct {
  int l;
  unsigned char b[8];
  const char *outp;
  int r;
  int le;
} TestData07[] = {
//XXX 0 -0, inf, -inf, nan's
  {25, {0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
   "3\000cdefghijklmnopqrstuvwxyz", 1, 1},
//XXX  {5, {0x3f, 0xf3, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae},
//XXX   "1.23\000fghijklmnopqrstuvwxyz", 1, 4},
  {2, {0x3f, 0xf3, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae},
   "abcdefghijklmnopqrstuvwxyz", -1, 32},
// These are from the gdtoa source testnos.
  {25, {0x3f, 0xf3, 0xae, 0x14, 0x7a, 0xe1, 0x47, 0xae},
   "1.23\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x44, 0x1a, 0xab, 0xdf, 0x21, 0x45, 0xb4, 0x30},
   "1.23e+20\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x3b, 0xcd, 0x0a, 0xe4, 0xcf, 0x76, 0x75, 0x31},
   "1.23e-20\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x83, 0xde, 0x1b},
   "1.23456789\000lmnopqrstuvwxyz", 1, 10},
  {25, {0x44, 0x1a, 0xc5, 0x37, 0xa6, 0x60, 0xb9, 0x97},
   "1.23456589e+20\000pqrstuvwxyz", 1, 14},
  {25, {0x46, 0x2f, 0x0c, 0xb0, 0x4e, 0x8f, 0xb7, 0x90},
   "1.23e+30\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x39, 0xb8, 0xf2, 0x86, 0x6f, 0x50, 0x10, 0xab},
   "1.23e-30\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x3b, 0xcd, 0x26, 0x81, 0x47, 0x1e, 0x7a, 0xda},
   "1.23456789e-20\000pqrstuvwxyz", 1, 14},
  {25, {0x39, 0xb9, 0x0a, 0x3e, 0x33, 0xbb, 0xd9, 0x95},
   "1.23456789e-30\000pqrstuvwxyz", 1, 14},
  {25, {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb},
   "1.2345678901234567\000tuvwxyz", 1, 18},
  {25, {0x7f, 0x7c, 0x06, 0x76, 0xcd, 0x1c, 0x61, 0xf5},
   "1.23e+306\000klmnopqrstuvwxyz", 1, 9},
  {25, {0x00, 0x6b, 0xa3, 0xb8, 0x5d, 0xa3, 0x96, 0xe8},
   "1.23e-306\000klmnopqrstuvwxyz", 1, 9},
  {25, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xba},
   "1.23e-320\000klmnopqrstuvwxyz", 1, 9},
  {25, {0x3b, 0xcd, 0x0a, 0xe4, 0xcf, 0x76, 0x75, 0x31},
   "1.23e-20\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x7f, 0xb1, 0x94, 0xb1, 0x4b, 0xda, 0xec, 0xdc},
   "1.23456789e+307\000qrstuvwxyz", 1, 15},
  {25, {0x00, 0x36, 0x31, 0x96, 0xbb, 0x98, 0x45, 0xfa},
   "1.23456589e-307\000qrstuvwxyz", 1, 15},
  {25, {0x3f, 0xf3, 0xc0, 0xca, 0x42, 0x8c, 0x59, 0xfb},
   "1.2345678901234567\000tuvwxyz", 1, 18},
  {25, {0x7e, 0x72, 0x6f, 0x51, 0x75, 0xf5, 0x64, 0x13},
   "1.2345678901234568e+301\000yz", 1, 23},
  {25, {0x01, 0x75, 0x2a, 0x64, 0xe3, 0x4b, 0xa0, 0xd3},
   "1.2345678901234567e-301\000yz", 1, 23},
  {25, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa},
   "1.235e-321\000lmnopqrstuvwxyz", 1, 10},
  {25, {0x44, 0xb5, 0x2d, 0x02, 0xc7, 0xe1, 0x4a, 0xf6},
   "1e+23\000ghijklmnopqrstuvwxyz", 1, 5},
  {25, {0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
   "Infinity\000jklmnopqrstuvwxyz", 1, 8},
  {25, {0x06, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
   "9.025971879324148e-277\000xyz", 1, 22},
  {25, {0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
   "2.2250738585072014e-308\000yz", 1, 23},
  {25, {0x3f, 0xf1, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a},
   "1.1\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf1, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a},
   "-1.1\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33},
   "1.2\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33},
   "-1.2\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xf4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd},
   "1.3\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd},
   "-1.3\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xf6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66},
   "1.4\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66},
   "-1.4\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
   "1.5\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
   "-1.5\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xf9, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a},
   "1.6\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xf9, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9a},
   "-1.6\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xfb, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33},
   "1.7\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xfb, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33},
   "-1.7\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd},
   "1.8\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd},
   "-1.8\000fghijklmnopqrstuvwxyz", 1, 4},
  {25, {0x3f, 0xfe, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66},
   "1.9\000efghijklmnopqrstuvwxyz", 1, 3},
  {25, {0xbf, 0xfe, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66},
   "-1.9\000fghijklmnopqrstuvwxyz", 1, 4},
  {0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, 0, 0}
};

const char *
ewtst::TestString::test07(bool return_name)
{
  if (return_name) {
    return "format double";
  }
  for (int i = 0; TestData07[i].outp != 0; i += 1) {
    char s[27];
    std::strcpy(s, "abcdefghijklmnopqrstuvwxyz");
    union {
      double v;
      unsigned char b[8];
    } u;
    for (int j = 0; j < 8; j += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
      u.b[j] = TestData07[i].b[7 - j];
#else
      u.b[j] = TestData07[i].b[j];
#endif
    }
    int e;
    bool r = ew::String::format_double(s, TestData07[i].l, &e, u.v);
    if (r != (TestData07[i].r == 1) || e != TestData07[i].le ||
     std::memcmp(s, TestData07[i].outp, 27) != 0) {
      report_error("bad format of \"%s\" %g l=%d: s=\"%s\" r=%d e=%d",
       TestData05[i].outp, u.v, TestData05[i].l, s, r, e);
    }
  }
  const ew::Debug &dbg = ew::Debug::instance();
  double *ii = new double[1000000];
  char *buf1 = new char[26000000];
  char *buf2 = new char[26000000];
  for (int i = 0; i < 1000000; i += 1) {
    ii[i] = (i * 5 + 321456) / 100000.0;
  }
  double t0, t1, t2;
  if (dbg.get_active("timing")) {
    t0 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    sprintf(buf1 + i * 26, "%.5f", ii[i]);
  }
  if (dbg.get_active("timing")) {
    t1 = ew::Time::elapsed();
  }
  for (int i = 0; i < 1000000; i += 1) {
    ew::String::format_double(buf2 + i * 26, 999, 0, ii[i]);
  }
  if (dbg.get_active("timing")) {
    t2 = ew::Time::elapsed();
    dbg.dprintf("%s %14s stdio %.6f ew::String %.6f", "timing", "format-double",
     t1 - t0, t2 - t1);
  }
  for (int i = 0; i < 1000000; i += 1) {
    if (std::strcmp(buf1 + i * 26, buf2 + i * 26) != 0) {
      report_error("sprintf-format discrepancy for %g: \"%s\" \"%s\"", ii[i],
       buf1 + i * 26, buf2 + i * 26);
    }
  }
  delete[] ii;
  delete[] buf1;
  delete[] buf2;
  return 0;
}

const char *
ewtst::TestString::test08(bool return_name)
{
  if (return_name) {
    return "fp";
  }
  union {
    double v;
    unsigned char b[8];
    uint64_t u;
  } u;
  unsigned char be[8] = {
    0x42, 0xa2, 0x30, 0x9c, 0xe5, 0x40, 0x00, 0x00
  };
  uint64_t ue = 0x42a2309ce5400000ULL;
  u.v = 1e13;
  int i;
  for (i = 0; i < 8; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    if (u.b[i] != be[7 - i]) {
      break;
    }
#else
    if (u.b[i] != be[i]) {
      break;
    }
#endif
  }
  if (sizeof(double) != 8 || i < 8 || u.u != ue) {
    report_error("unexpected fp representation");
  }
  double b = 1.0;
  while (b * 0.1 != 0.0) {
    b *= 0.1;
  }
  if (b > 1e-320) {
    report_error("sudden underflow");
  }
  union {
    float v;
    unsigned char b[4];
  } us;
  unsigned char ns[4] = {
    0x7f, 0xc0, 0x00, 0x00
  };
  unsigned char is[4] = {
    0x7f, 0x80, 0x00, 0x00
  };
  std::sscanf("nan", "%f", &us.v);
  for (i = 0; i < 4; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    if (us.b[i] != ns[3 - i]) {
      break;
    }
#else
    if (us.b[i] != ns[i]) {
      break;
    }
#endif
  }
  if (i < 4) {
    report_error("unexpected quiet nan float representation");
  }
  for (i = 0; i < 4; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    us.b[i] = is[3 - i];
#else
    us.b[i] = is[i];
#endif
  }
  us.v = us.v - us.v;
  for (i = 0; i < 4; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    if (i == 3) {
      us.b[i] &= 0x7f;
    }
    if (us.b[i] != ns[3 - i]) {
      break;
    }
#else
    if (i == 0) {
      us.b[i] &= 0x7f;
    }
    if (us.b[i] != ns[i]) {
      break;
    }
#endif
  }
  if (i < 4) {
    report_error("unexpected quiet nan float representation 2");
  }
  unsigned char nd[8] = {
    0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  unsigned char id[8] = {
    0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  std::sscanf("nan", "%lf", &u.v);
  for (i = 0; i < 8; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    if (u.b[i] != nd[7 - i]) {
      break;
    }
#else
    if (u.b[i] != nd[i]) {
      break;
    }
#endif
  }
  if (i < 8) {
    report_error("unexpected quiet nan double representation");
  }
  for (i = 0; i < 8; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    u.b[i] = id[7 - i];
#else
    u.b[i] = id[i];
#endif
  }
  u.v = u.v - u.v;
  for (i = 0; i < 8; i += 1) {
#if BYTE_ORDER == LITTLE_ENDIAN
    if (i == 7) {
      u.b[i] &= 0x7f;
    }
    if (u.b[i] != nd[7 - i]) {
      break;
    }
#else
    if (i == 0) {
      u.b[i] &= 0x7f;
    }
    if (u.b[i] != nd[i]) {
      break;
    }
#endif
  }
  if (i < 8) {
    report_error("unexpected quiet nan double representation 2");
  }
  if (FLT_ROUNDS != 1) {
    report_error("unexpected FLT_ROUNDS %d", FLT_ROUNDS);
  }
  return NULL;//!?
}

const char *
ewtst::TestString::test(int n, bool return_name)
{
  switch(n) {
  case 1:
    return test01(return_name);
  case 2:
    return test02(return_name);
  case 3:
    return test03(return_name);
  case 4:
    return test04(return_name);
  case 5:
    return test05(return_name);
  case 6:
    return test06(return_name);
  case 7:
    return test07(return_name);
  case 8:
    return test08(return_name);
  }
  return 0;
}

ewtst::TestString::TestString() :
 Test(Name, Desc, DebugVal)
{
}

int
ewtst::TestString::exec(int ac, char **av)
{
  return Tst.exec_base(ac, av);
}
